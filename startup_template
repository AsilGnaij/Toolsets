set cut_paste_input [stack 0]
version 11.3 v4
BackdropNode {
 inputs 0
 name BackdropNode1
 tile_color 0x82601
 label "References    <img src=\"SideBySide.png\">"
 note_font_size 50
 selected true
 xpos -347
 ypos -277
 icon "<img src=\"SideBySide.png\">"
 bdwidth 759
 bdheight 586
}
BackdropNode {
 inputs 0
 name BackdropNode15
 tile_color 0x132601
 label "Degrain    <img src=\"denoise.png\">"
 note_font_size 50
 selected true
 xpos 426
 ypos -3291
 icon "<img src=\"denoise.png\">"
 bdwidth 393
 bdheight 410
}
BackdropNode {
 inputs 0
 name BackdropNode16
 tile_color 0x260801
 label "Regrain    <img src=\"Grain.png\">"
 note_font_size 50
 selected true
 xpos 423
 ypos -1022
 icon "<img src=\"Grain.png\">"
 bdwidth 578
 bdheight 310
}
BackdropNode {
 inputs 0
 name BackdropNode2
 tile_color 0x26241e01
 label "previous ver    <img src=\"Read.png\">"
 note_font_size 30
 selected true
 xpos 68
 ypos -208
 icon "<img src=\"Read.png\">"
 bdwidth 261
 bdheight 207
}
BackdropNode {
 inputs 0
 name BackdropNode3
 tile_color 0x26241e01
 label "approved refQT   <img src=\"Read.png\">"
 note_font_size 30
 selected true
 xpos 69
 ypos 45
 icon "<img src=\"Read.png\">"
 bdwidth 265
 bdheight 206
}
BackdropNode {
 inputs 0
 name BackdropNode4
 tile_color 0x261212ff
 label "image proccess    <img src=\"EdgeDetect.png\">"
 note_font_size 30
 selected true
 xpos -285
 ypos -71
 icon "<img src=\"EdgeDetect.png\">"
 bdwidth 277
 bdheight 169
}
BackdropNode {
 inputs 0
 name BackdropNode5
 tile_color 0x26241e01
 label "Plate   <img src=\"Read.png\">"
 note_font_size 30
 selected true
 xpos 531
 ypos -3535
 icon "<img src=\"Read.png\">"
 bdwidth 261
 bdheight 207
}
CheckerBoard2 {
 inputs 0
 color0 {0.01 0.01 0.01 1}
 color1 {0.05 0.05 0.05 1}
 color2 {0.01 0.01 0.01 1}
 color3 {0.05 0.05 0.05 1}
 centerlinecolor {0.1 0.1 0 1}
 name CheckerBoard1
 tile_color 0xe955ffff
 selected true
 xpos 670
 ypos -3451
}
Dot {
 name Dot62
 tile_color 0xe955ffff
 selected true
 xpos 704
 ypos -3238
}
set N9213c30 [stack 0]
Colorspace {
 colorspace_out AlexaV3LogC
 name Colorspace9
 selected true
 xpos 670
 ypos -3192
}
OFXcom.absoft.neatvideo5_v5 {
 DNP 
 ProfileName "Unspecified device (2048x1556p).dnp"
 NFP NTBkAPotAAAAAAAAAAABAAAAAACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAAAAAAIA/AACAPwAAgD8AAIA/zcxMP83MTD8BAAAAAADAPwAAwD8AAIA/AACAPwAAgD8AAAAAAAAAP5qZmT4AAAAAAAAAAAAAgD8AAAAAAAAAAAAAgD8AAIA/AACAPwAAgD8AAQAAAACAPwAAAAAAAAAAAACAPwAAAAAAAAAAAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQAAAgAAAAAAgD8AAAAAAAAAAAAAwD8AAAAAAAAAAAAAgD8BAQEBAQEBAQEBAQEBAQEBAQAAAAAAAAABAAAAAAAAAAAAQD8AAIA/AACAPwAAgD8BAQEBAQEBAQAAgD8AAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAIA/AACAPwAAgw
 PresetName "custom preset"
 ParamsHash1 786875438
 ParamsHash2 264
 ParamsHash3 0
 name "Reduce Noise v5_1"
 selected true
 xpos 670
 ypos -3164
}
Colorspace {
 colorspace_in AlexaV3LogC
 name Colorspace10
 selected true
 xpos 670
 ypos -3136
}
Group {
 name Gustave_Write_Degrain1
 onCreate "# Variables to setup for the onCreate Callback\n# choice_list: lists write available Write Node connected to the Switch in the dropdown Menu\nthis_node = nuke.thisNode()\ngui = int(this_node\['gui'].getValue())\nprint('\[\{0\}] \{1\}'.format(this_node.name(), 'onCreate'))\n\ndef on_create_node_recipe():    \n    if not gui:\n        print('NON GUI SESSION')\n        return\n    \n    import framework_folks\n    \n    set_file_path()\n    \n    choice_list = list()\n    \n    # Open the Autowrite Group and get the Switch Node\n    with this_node:\n        settings = nuke.toNode('Output_Config_Selection')\n    \n    # Get all Inputs from the Switch    \n    inputs = settings.inputs()\n    \n    # For every node add an option in the setting menu\n    for input_int in range(0, inputs):\n        choice_list.append(settings.input(input_int).name())\n    \n    this_node\['settings'].setValues(choice_list)\n\ndef set_file_path():\n    \"\"\"\n\n    :return: The checkbox value. Does not really matter. But it's functionized so we can return before doing\n    the extra code.\n    \"\"\"\n    this_node = nuke.thisNode()\n\n    # IF THERE IS NO INPUT FILE. WE NEED TO WARN THE USER AND IGNORE THE REST OF THE PROCESS.\n    label = this_node\['node_label_override'].value()\n    if not node_has_metadata(this_node):\n        this_node\['label'].setValue(label)\n        return\n\n    file_path = this_node\['path_builder'].value()\n    entity_path = nuke.root()\['g_entity_path'].getValue()\n    entity_type = nuke.root()\['g_entity_type'].getValue()\n    entity_template = framework.utils.templates.Template('\{\}_root'.format(str(entity_type).lower()))\n    tokens = entity_template.scan_data(entity_path)\n    my_pattern = re.compile(\"\{(.*?)\}\")\n    occurences = re.findall(my_pattern, file_path)\n\n    this_node\['label'].setValue(label)\n\n    result = None\n\n    for template_path in occurences:\n        pattern = '\{' + template_path + '\}'\n        result = re.sub(pattern,\n                        framework.utils.templates.Template(template_path).apply_data(tokens),\n                        file_path)\n\n    if result:\n        this_node\['file'].setValue(result)\n    elif not result:\n        this_node\['file'].setValue(this_node\['path_builder'].getValue())\n        \ndef node_has_metadata(node):\n    \"\"\"\n    :return: Boolean of whether the node has metadata that contains an input or not\n    \"\"\"\n    result = False\n\n    if \"input/filename\" in node.metadata():\n        result = True\n\n    return result\n    \nif gui:\n    nukescripts.utils.executeDeferred(on_create_node_recipe)"
 knobChanged "knob = nuke.thisKnob()\nthis_node = nuke.thisNode()\ngui = int(this_node\['gui'].getValue())\n\ndef knob_changed_recipe():\n    if not gui:\n        print('NON GUI SESSION')\n        return\n\n    if knob.name() == \"inputChange\":\n        print('Reevaluating File Knob...')\n        set_file_path()\n\n    if knob.name() == \"preprocess_version\":\n        print('Reevaluating File Knob...')\n        set_file_path()\n\n    # Crop knob: Drives the switch inside of the Write Node (Preserve BBox)\n    if knob.name() == 'crop':\n        # It output a float to we need to convert it to Int to be able to used if conditions properly.\n        if int(knob.getValue()):\n            this_node.knobs()\['format'].setVisible(True)\n        else:\n            this_node.knobs()\['format'].setVisible(False)\n\n    # If the Knob Name settings is changed. We have to update the path and relink all the knobs and rebuild the advanced settings.\n    if knob.name() == 'settings':\n        try:\n            switch_node = update_autowrite_ui(knob.getValue())\n        except Exception:\n            print('Trying to load Write Settings...')\n\n        which = switch_node\['which'].getValue()\n        selected = switch_node.input(int(which)).name()\n        inputs = switch_node.inputs()\n\n        for input_int in range(0, inputs):\n            if switch_node.input(input_int).name() == selected:\n                switch_node.input(input_int)\['disable'].setValue(False)\n                continue\n            switch_node.input(input_int)\['disable'].setValue(True)\n\n\ndef node_has_metadata(node):\n    \"\"\"\n    :return: Boolean of whether the node has metadata that contains an input or not\n    \"\"\"\n    result = False\n\n    if \"input/filename\" in node.metadata():\n        result = True\n\n    return result\n\n\ndef set_file_path():\n    \"\"\"\n\n    :return: The checkbox value. Does not really matter. But it's functionized so we can return before doing\n    the extra code.\n    \"\"\"\n    this_node = nuke.thisNode()\n\n    # IF THERE IS NO INPUT FILE. WE NEED TO WARN THE USER AND IGNORE THE REST OF THE PROCESS.\n    label = this_node\['node_label_override'].value()\n    if not node_has_metadata(this_node):\n        return\n\n    file_path = this_node\['path_builder'].value()\n    entity_path = nuke.root()\['g_entity_path'].getValue()\n    entity_type = nuke.root()\['g_entity_type'].getValue()\n    entity_template = framework.utils.templates.Template('\{\}_root'.format(str(entity_type).lower()))\n    tokens = entity_template.scan_data(entity_path)\n    my_pattern = re.compile(\"\{(.*?)\}\")\n    occurences = re.findall(my_pattern, file_path)\n\n    this_node\['label'].setValue(label)\n\n    result = None\n\n    for template_path in occurences:\n        pattern = '\{' + template_path + '\}'\n        result = re.sub(pattern,\n                        framework.utils.templates.Template(template_path).apply_data(tokens),\n                        file_path)\n\n    if result:\n        this_node\['file'].setValue(result)\n    elif not result:\n        this_node\['file'].setValue(this_node\['path_builder'].getValue())\n\n\ndef update_autowrite_ui(setting):\n    default_knobs = get_default_knobs()\n    with this_node:\n        switch_node = nuke.toNode('Output_Config_Selection')\n        default_write = nuke.toNode('default_writenode')\n        selection = int(setting)\n        new_node = nuke.toNode(switch_node.input(int(setting)).name())\n        delete_advanced_settings()\n        print('New Write Setting: \{\}'.format(new_node.name()))\n        add_default_knobs(default_knobs, new_node)\n        add_advanced_settings(default_write, new_node)\n        selection_knob = switch_node\['which']\n    selection_knob.setValue(selection)\n    switch_node.setSelected(True)\n    this_node.knob('main_tab').setFlag(0)\n    return switch_node\n\n\ndef delete_advanced_settings():\n    advanced_knob_dict = dict()\n    knobs = this_node.allKnobs()\n    for index, knob in enumerate(knobs):\n        if knob.name() == 'ADVANCED_SETTINGS_START':\n            begin = index\n\n    advanced_knobs = \[advanced_knob_dict.update(\{x.name(): x\}) for x in knobs\[begin + 1:index + 1]]\n    for knob_name, knob_obj in advanced_knob_dict.items():\n        this_node.removeKnob(knob_obj)\n\n\ndef get_default_knobs():\n    # Open group and return default knobs\n    default_knob_dict = dict()\n    with this_node:\n        knobs = nuke.toNode('default_knobs').allKnobs()\n        for index, knob in enumerate(knobs):\n            if knob.name() == 'DEFAULT_KNOBS_START':\n                begin = index\n    default_knobs = \[default_knob_dict.update(\{x.name(): x\}) for x in knobs\[begin + 1:index]]\n    return default_knob_dict\n    # return default_knobs\n\n\ndef add_default_knobs(default_knobs, new_node):\n    # Add new default knobs\n    for knob_name, knob_obj in default_knobs.items():\n        new_knob = this_node.knobs().get(knob_name)\n        if not new_knob:\n            print('Knob \{\} does not exist. Creating Link_Knob.'.format(knob_name))\n            missing_knob = nuke.Link_Knob(knob_name)\n            this_node.addKnob(missing_knob)\n            new_knob = this_node.knobs().get(knob_name)\n\n        new_link = '\{0\}.\{1\}'.format(new_node.name(), knob_name)\n        new_knob.setLink(new_link)\n        this_node\[knob_name].setValue(this_node\[knob_name].value())\n\n\ndef add_advanced_settings(default_node, new_node):\n    print('Registering advanced settings...')\n    default_knob_names = \[]\n    additional_knob_names = \[]\n\n    for knob in default_node.allKnobs():\n        default_knob_names.append(knob.name())\n\n    for knob in new_node.allKnobs():\n        additional_knob_names.append(knob.name())\n\n    additional_knobs = list(set(additional_knob_names) - set(default_knob_names))\n\n    for knob in additional_knobs:\n        new_knob = new_node.knobs().get(knob)\n        this_node.addKnob(new_knob)\n        new_knob.setFlag(nuke.STARTLINE)\n        print('Added Knob \{0\} - \{1\}\"'.format(new_knob.name(), new_knob))\n\n    return additional_knobs\n\n\nknob_changed_recipe()"
 tile_color 0x4bff26ff
 label "--\n\[regsub \{^(.*\[\\/])\} \[value file] \"\"]\nWrite Setting: \[value settings]"
 note_font "DejaVu Sans"
 note_font_color 0xff
 selected true
 xpos 670
 ypos -3064
 addUserKnob {20 main_tab l Gustave_Write}
 addUserKnob {26 title l " " T "<p><code><span style=\"font-size: xx-large;\"><div><div><span style=\"color:#86ff8a;\">\[</span><span style=\"color:#7bfb84;\">G</span><span style=\"color:#70f87e;\">U</span><span style=\"color:#64f477;\">S</span><span style=\"color:#59f071;\">T</span><span style=\"color:#5aed6a;\">A</span><span style=\"color:#5beb63;\">V</span><span style=\"color:#5ce85b;\">E</span><span style=\"color:#5de554;\"> WRITE </span><span style=\"color:#46ec3f;\">D</span><span style=\"color:#2ff22a;\">E</span><span style=\"color:#17f915;\">G</span><span style=\"color:#00ff00;\">R</span><span style=\"color:#22ff1f;\">A</span><span style=\"color:#45fe3e;\">I</span><span style=\"color:#67fe5d;\">N</span><span style=\"color:#89fd7c;\">]</span></div></span></div></span></span></span></span></code></p>"}
 addUserKnob {26 node_info l " " T "<span style=\"color:#86ff8a;\"><br>\nPretty self-explanatory. Use this for any degrain renders."}
 addUserKnob {26 output_settings l "Output Settings"}
 addUserKnob {4 settings l " " M {EXRs EXRs_Compressed PNGs JPEGs}}
 addUserKnob {6 crop l Crop +STARTLINE}
 addUserKnob {41 format l "" -STARTLINE +HIDDEN T All_Available_Formats.format}
 addUserKnob {26 empty_space l "" +STARTLINE T " "}
 addUserKnob {26 divider_line l " "}
 addUserKnob {41 file_type l INVISIBLE +INVISIBLE T EXRs.file_type}
 addUserKnob {41 channels T EXRs.channels}
 addUserKnob {41 file T EXRs.file}
 addUserKnob {26 empty_space_02 l "" +STARTLINE T " "}
 addUserKnob {26 actions l Actions}
 addUserKnob {1 node_type +INVISIBLE}
 node_type gustave_write_degrain
 addUserKnob {1 preprocess_name l "Preprocess Name" +INVISIBLE}
 preprocess_name dgn
 addUserKnob {3 preprocess_version l Version}
 preprocess_version 1
 addUserKnob {41 Render l "Render Locally" T EXRs.Render}
 addUserKnob {1 path_builder l INVISIBLE +INVISIBLE}
 path_builder "\{shot_plate_folder\}/\[regsub  \{(?=\\.).+\} \[file tail \[metadata input/filename]] \"\"]/dgn/\[regsub  \{(?=\\.).+\} \[file tail \[metadata input/filename]] \"\"]_\[value preprocess_name]\[format %02d \[value preprocess_version]].%04d.\[value file_type]"
 addUserKnob {22 gustave_icon_set +INVISIBLE T "import framework_folks\n\nnode = nuke.thisNode()\ntitle_template = node\['title_template'].value()\ngustave_icon = '<img src=\"\{\}\">'.format(framework_folks.utils.icons.retrieve_all_gustave_icons().get('low'))\ntitle = re.sub('\\GUSTAVE_ICON', gustave_icon, title_template)\nnode\['title_template'].setValue(title)\n\nprint('Set Gustave_Write title info and logo.')" +STARTLINE}
 addUserKnob {1 g_type +INVISIBLE}
 g_type Gustave_Write
 addUserKnob {6 gui l gui? +INVISIBLE +STARTLINE}
 gui {{"\$gui"}}
 addUserKnob {6 has_metadata_callback +INVISIBLE +STARTLINE}
 has_metadata_callback {{"\[python -execlocal def\\ metadata_changed():\\n\\ \\ \\ \\ if\\ not\\ int(nuke.thisNode()\\\['gui'\\].getValue()):\\n\\ \\ \\ \\ \\ \\ \\ \\ return\\n\\ \\ \\ \\ node_metadata\\ =\\ nuke.thisNode().metadata()\\n\\ \\ \\ \\ if\\ not\\ \\\"input/filename\\\"\\ in\\ node_metadata:\\n\\ \\ \\ \\ \\ \\ \\ \\ return\\n\\n\\ \\ \\ \\ found_input\\ =\\ re.sub(\\\"(?=\\\\.).+\\\",\\ \\\"\\\",\\ os.path.basename(node_metadata\\\['input/filename'\\]))\\n\\ \\ \\ \\ if\\ not\\ found_input:\\n\\ \\ \\ \\ \\ \\ \\ \\ return\\n\\n\\ \\ \\ \\ input_filename_from_metadata\\ =\\ '\\\{0\\\}_dgn\\\{1\\\}'.format(found_input,\\ str(int(nuke.thisNode()\\\['preprocess_version'\\].getValue())).zfill(2))\\n\\n\\ \\ \\ \\ node_file_knob\\ =\\ os.path.basename(nuke.thisNode()\\\['file'\\].getValue())\\n\\ \\ \\ \\ input_filename_from_node\\ =\\ re.sub(\\\"(?=\\\\.).+\\\",\\ \\\"\\\",\\ node_file_knob)\\n\\n\\ \\ \\ \\ if\\ input_filename_from_metadata\\ ==\\ input_filename_from_node:\\n\\ \\ \\ \\ \\ \\ \\ \\ return\\n\\n\\ \\ \\ \\ print('Metadata\\ Changed\\ Callback')\\n\\ \\ \\ \\ set_file_path()\\n\\n\\nmetadata_changed()\\nret\\ =\\ 1]"}}
 addUserKnob {26 node_label_override l "" +STARTLINE +INVISIBLE T "--\n\[regsub \{^(.*\[\\/])\} \[value file] \"\"]\nWrite Setting: \[value settings]"}
 addUserKnob {6 color_rgba_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
 addUserKnob {20 callbacks l "Python Callbacks"}
 addUserKnob {26 writenode_callbacks l "" +STARTLINE T "Write Node Callbacks"}
 addUserKnob {26 ""}
 addUserKnob {41 beforeFrameRender l "before render" T EXRs.beforeFrameRender}
 addUserKnob {41 beforeRender l "before each frame" T EXRs.beforeRender}
 addUserKnob {41 afterRender l "after each frame" T EXRs.afterRender}
 addUserKnob {41 renderProgress l "after render" T EXRs.renderProgress}
 addUserKnob {41 afterFrameRender l "render progress" T EXRs.afterFrameRender}
 addUserKnob {20 advanced_settings l "Advanced Settings"}
 addUserKnob {26 advanced_settings_info l "" +STARTLINE T "Advanced Settings for selected Output Configuration"}
 addUserKnob {26 ""}
 addUserKnob {26 ADVANCED_SETTINGS_START l "" +STARTLINE T ""}
 addUserKnob {11 first_part l "first part" t "Enabled when the 'channels' interleave strategy is selected and the channels knob is set to 'all' <br>i.e. the output is a multi-part exr with one part per layer.<br><br>Specifies the layer that will be assigned to the first part of the multi-part .exr. All remaining parts will be stored in alphanumeric order.<br>In a multi-view setup, the layer for each view will be assigned to the topmost parts<br>i.e. part0: rgba.left, part1: rgba.right<br><br>The 'none' acts as the default behaviour where all parts will be stored in alphanumeric order." +DISABLED}
 first_part none
 addUserKnob {0 stereo +INVISIBLE}
 addUserKnob {4 right_view l "Right view" t "If stereo is on, this is the view that is written as the \"right\" image" +DISABLED +HIDDEN M {"\7" main}}
 addUserKnob {6 autocrop t "Reduce the bounding box to the non-zero area. This is normally not needed as the zeros will compress very small, and it is slow as the whole image must be calculated before any can be written. However this may speed up some programs reading the files." +STARTLINE}
 addUserKnob {4 left_view l "Left view" t "If stereo is on, this is the view that is written as the \"left\" image" +DISABLED +HIDDEN M {"\7" main}}
 addUserKnob {6 noprefix l "do not attach prefix" t "By default unknown metadata keys have the prefix 'nuke' attached to them before writing them into the file.  Enable this option to write the metadata 'as is' without the nuke prefix." +STARTLINE}
 addUserKnob {6 write_hash l "write hash" t "Write the hash of the node graph into the exr file.  Useful to see if your image is up to date when doing a precomp." +INVISIBLE +STARTLINE}
 addUserKnob {6 "standard layer name format" t "Older versions of Nuke write out channel names in the format: view.layer.channel. Check this option to follow the EXR standard format: layer.view.channel" +STARTLINE}
 addUserKnob {4 interleave t "Interleave strategy of channels, layers and views within the rendered .exr. A single or multi-part exr will be created as per the options below, with layers and parts sorted alphanumerically.<br><br><u>channels, layers and views</u><br>Creates a single-part .exr and ensures backwards compatibility with applications using OpenEXR 1.x.<br><br><u>channels and layers</u><br>Creates a multi-part .exr with one part per view. This can speed up Read performance as Nuke will only read the part pertaining to the specified view.<br><br><u>channels</u><br>Creates a multi-part exr with one part per layer." M {"channels, layers and views" "channels and layers" channels}}
 addUserKnob {4 datatype M {"16 bit half" "32 bit float"}}
 addUserKnob {4 heroview t "If stereo is on, this is the view that is written as the \"main\" image" M {"\7" main}}
 addUserKnob {4 compression M {none "Zip (1 scanline)" "Zip (16 scanlines)" "PIZ Wavelet (32 scanlines)" RLE B44 B44A DWAA DWAB}}
 addUserKnob {8 dw_compression_level l "compression level" +DISABLED +HIDDEN R 0 500}
 addUserKnob {6 truncateChannelNames l "truncate channel names" t "Truncate channel names to a maximum of 31 characters for backwards compatibility" +STARTLINE}
 addUserKnob {6 write_ACES_compliant_EXR l "write ACES compliant EXR" t "Write out an ACES compliant EXR file" +STARTLINE}
 addUserKnob {6 write_full_layer_names l "write full layer names" t "Older versions of Nuke just stored the layer name in the part name of multi-part files. Check this option to always write the layer name in the channel names following the EXR standard." +DISABLED +STARTLINE}
 addUserKnob {4 metadata t "Which metadata to write out to the EXR file.<p>'no metadata' means that no custom attributes will be created and only metadata that fills required header fields will be written.<p>'default metadata' means that the optional timecode, edgecode, frame rate and exposure header fields will also be filled using metadata values." M {"no metadata" "default metadata" "default metadata and exr/*" "all metadata except input/*" "all metadata"}}
 metadata "all metadata"
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x441d1dff
  label "This is the Gustave Autowrite Setup. <b>Pretty</b>, isn't it?"
  note_font_size 42
  xpos -1089
  ypos -386
  bdwidth 1889
  bdheight 1703
  z_order -1
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0xffe6d3ff
  label Output_Config_Selection
  note_font_size 24
  xpos -229
  ypos 649
  bdwidth 570
  bdheight 227
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0xffe6d3ff
  label "These are not really needed but I thought they were a great way to see what the default settings were for a specific Write Node. Also very easy to move around so if a node has complicated settings and we wish to modify\nthe settings promptly. All we have to do is copy one of those NoOps above said Write Node and the callback in the NoOp will set the values from itself to the Write Node automatically."
  note_font_size 12
  xpos -495
  ypos 292
  bdwidth 1285
  bdheight 121
 }
 BackdropNode {
  inputs 0
  name default_knobs
  knobChanged "nuke.thisNode()\['label'].evaluate()"
  label "<font color=#9f0000>\[python -exec \{\nknobs = nuke.thisNode().allKnobs()\nfor index, knob in enumerate(knobs):\n    if knob.name() == 'DEFAULT_KNOBS_START':\n        begin = index\n\ndefault_knob_dict = dict()\n\[default_knob_dict.update(\{x.name(): x.value()\}) for x in knobs\[begin+1:index]]\n\n\}]\[python default_knob_dict]"
  note_font "Bitstream Vera Sans"
  xpos 215
  ypos -172
  bdwidth 293
  bdheight 167
  addUserKnob {20 User}
  addUserKnob {26 DEFAULT_KNOBS_START l INVISIBLE +INVISIBLE}
  addUserKnob {6 channels -STARTLINE}
  channels true
  addUserKnob {6 file -STARTLINE}
  file true
  addUserKnob {6 Render -STARTLINE}
  Render true
  addUserKnob {6 file_type +STARTLINE}
  file_type true
  addUserKnob {6 beforeRender +STARTLINE}
  beforeRender true
  addUserKnob {6 beforeFrameRender +STARTLINE}
  beforeFrameRender true
  addUserKnob {6 afterFrameRender +STARTLINE}
  afterFrameRender true
  addUserKnob {6 afterRender +STARTLINE}
  afterRender true
  addUserKnob {6 renderProgress +STARTLINE}
  renderProgress true
  addUserKnob {26 DEFAULT_KNOBS_END l INVISIBLE +INVISIBLE}
 }
 Reformat {
  inputs 0
  name All_Available_Formats
  xpos -196
  ypos -31
 }
 StickyNote {
  inputs 0
  name StickyNote1
  tile_color 0xffe6d3ff
  label "The Write Node parses the default_knobs to add them if they are missing.\nCreates them as Link_Knob so they can be linked to the Write Nodes inside the group."
  xpos 138
  ypos -213
 }
 Input {
  inputs 0
  name Input
  xpos -485
  ypos -273
 }
 Dot {
  name Dot7
  xpos -451
  ypos -136
 }
set N8e37030 [stack 0]
 Dot {
  name Dot9
  xpos -301
  ypos -136
 }
 Crop {
  box {0 0 {All_Available_Formats.width} {All_Available_Formats.height}}
  name Final_Write_Crop
  xpos -335
  ypos -32
 }
push $N8e37030
 Dot {
  name Dot8
  xpos -588
  ypos -136
 }
 Dot {
  name Dot2
  xpos -588
  ypos -29
 }
 Switch {
  inputs 2
  which {{parent.crop}}
  name Preserve_Bounding_Box
  tile_color 0xffe6d3ff
  label "\[value which]\nThe expression gets whether the Crop Checkbox is checked or not.\n"
  xpos -484
  ypos -44
 }
 Dot {
  name Dot6
  xpos -450
  ypos 106
 }
set N9326940 [stack 0]
 Dot {
  name Dot4
  xpos -55
  ypos 106
 }
set N8e21150 [stack 0]
 Dot {
  name Dot5
  xpos 346
  ypos 106
 }
set N9333b30 [stack 0]
 Dot {
  name Dot3
  xpos 735
  ypos 106
 }
 NoOp {
  name default_info4
  knobChanged "this_node = nuke.thisNode()\nwrite_node = this_node.dependent()\[0]\nseperator_in = this_node.knob('seperator_in')\nadd_knob = False\n\nfor num, knob in enumerate(this_node.allKnobs()):\n    if knob.name() == 'seperator_out':\n        add_knob = False\n    \n    if add_knob:\n        if knob.name() in write_node.knobs():     \n            value = nuke.toNode(this_node.name())\[knob.name()].getValue()             \n            write_node\[knob.name()].setValue(value)\n        \n    if knob.name() == 'seperator_in':\n        add_knob = True"
  xpos 700
  ypos 385
  addUserKnob {20 variables l Variables}
  addUserKnob {26 seperator_in l "" +STARTLINE}
  addUserKnob {1 file_type}
  file_type jpeg
  addUserKnob {26 seperator_out l "" +STARTLINE}
  addUserKnob {26 info l "" +STARTLINE T "Put your default info for the knobs in the below node here in between the two seperators"}
 }
 Write {
  channels rgba
  file /Volumes/Projects/dev/VFX/dev_001/dev_001_010/Plates/bruno2/dgn/bruno2_dgn01.%04d.jpeg
  file_type jpeg
  create_directories true
  checkHashOnRead false
  version 1
  in_colorspace linear
  out_colorspace linear
  name JPEGs
  xpos 700
  ypos 553
  disable true
 }
push $N9333b30
 NoOp {
  name default_info3
  knobChanged "this_node = nuke.thisNode()\nwrite_node = this_node.dependent()\[0]\nseperator_in = this_node.knob('seperator_in')\nadd_knob = False\n\nfor num, knob in enumerate(this_node.allKnobs()):\n    if knob.name() == 'seperator_out':\n        add_knob = False\n    \n    if add_knob:\n        if knob.name() in write_node.knobs():     \n            value = nuke.toNode(this_node.name())\[knob.name()].getValue()             \n            write_node\[knob.name()].setValue(value)\n        \n    if knob.name() == 'seperator_in':\n        add_knob = True"
  xpos 312
  ypos 384
  addUserKnob {20 variables l Variables}
  addUserKnob {26 seperator_in l "" +STARTLINE}
  addUserKnob {1 file_type}
  file_type png
  addUserKnob {26 seperator_out l "" +STARTLINE}
  addUserKnob {26 info l "" +STARTLINE T "Put your default info for the knobs in the below node here in between the two seperators"}
 }
 Write {
  channels rgba
  file /Volumes/Projects/dev/VFX/dev_001/dev_001_010/Plates/bruno2/dgn/bruno2_dgn01.%04d.png
  file_type png
  create_directories true
  checkHashOnRead false
  in_colorspace linear
  out_colorspace linear
  name PNGs
  xpos 312
  ypos 554
  disable true
 }
push $N9326940
 ModifyMetaData {
  metadata {
   {set exr/compressionName "\[value EXRs_Compressed.compression]"}
  }
  name ModifyMetaData1
  label "\[value EXRs_Compressed.compression]"
  xpos -485
  ypos 191
 }
 NoOp {
  name default_info1
  knobChanged "this_node = nuke.thisNode()\nwrite_node = this_node.dependent()\[0]\nseperator_in = this_node.knob('seperator_in')\nadd_knob = False\n\nfor num, knob in enumerate(this_node.allKnobs()):\n    if knob.name() == 'seperator_out':\n        add_knob = False\n    \n    if add_knob:\n        if knob.name() in write_node.knobs():     \n            value = nuke.toNode(this_node.name())\[knob.name()].getValue()             \n            write_node\[knob.name()].setValue(value)\n        \n    if knob.name() == 'seperator_in':\n        add_knob = True"
  xpos -485
  ypos 376
  addUserKnob {20 variables l Variables}
  addUserKnob {26 seperator_in l "" +STARTLINE}
  addUserKnob {1 file_type}
  file_type exr
  addUserKnob {1 compression}
  compression DWAA
  addUserKnob {7 dw_compression_level R 0 500}
  dw_compression_level 150
  addUserKnob {26 seperator_out l "" +STARTLINE}
  addUserKnob {26 info l "" +STARTLINE T "Put your default info for the knobs in the below node here in between the two seperators"}
 }
 Write {
  channels rgba
  file dgn01.%04d.exr
  file_type exr
  compression DWAA
  dw_compression_level 150
  metadata "all metadata"
  first_part rgba
  create_directories true
  last 5
  version 4
  in_colorspace linear
  out_colorspace linear
  name EXRs_Compressed
  xpos -485
  ypos 559
  disable true
 }
push $N8e21150
 NoOp {
  name default_info
  knobChanged "this_node = nuke.thisNode()\nwrite_node = this_node.dependent()\[0]\nseperator_in = this_node.knob('seperator_in')\nadd_knob = False\n\nfor num, knob in enumerate(this_node.allKnobs()):\n    if knob.name() == 'seperator_out':\n        add_knob = False\n    \n    if add_knob:\n        if knob.name() in write_node.knobs():     \n            value = nuke.toNode(this_node.name())\[knob.name()].getValue()             \n            write_node\[knob.name()].setValue(value)\n        \n    if knob.name() == 'seperator_in':\n        add_knob = True"
  xpos -89
  ypos 369
  addUserKnob {20 variables l Variables}
  addUserKnob {26 seperator_in l "" +STARTLINE}
  addUserKnob {1 file_type}
  file_type exr
  addUserKnob {26 seperator_out l "" +STARTLINE}
  addUserKnob {26 info l "" +STARTLINE T "Put your default info for the knobs in the below node here in between the two seperators"}
 }
 Write {
  channels rgba
  file /Volumes/Projects/Freebirds/FB300/VFX/FB303/FB303_011/FB303_011_090/Plates/FB303_011_090_fg01_v001/dgn/FB303_011_090_fg01_v001_dgn01.%04d.exr
  file_type exr
  metadata "all metadata"
  first_part none
  create_directories true
  version 17
  name EXRs
  xpos -89
  ypos 546
 }
 Switch {
  inputs 4
  name Output_Config_Selection
  knobChanged "print('Switch Node \"knobChanged\" callback initialized...')\nthis_node = nuke.thisNode()\n\n# What is the current selected node in the Switch\nwhich = this_node\['which'].getValue()\nselected = this_node.input(int(which)).name()\n\n# How many inputs the Switch has connected\ninputs = this_node.inputs()\n\n# Get all the \"WriteNodes\" connected to this Switch and build a list comprehension.\n# Then add them to the Settings selection menu in the Gustave_Write node\nwrite_nodes = \[x.name() for x in this_node.dependencies()]\nnuke.thisParent()\['settings'].setValues(write_nodes)\n\n# A snippet to only enable the selected Write Node. This allows the artist to select the\n# group node and only \n\nfor input_int in range(0, inputs):\n    if this_node.input(input_int).name() == selected:\n        this_node.input(input_int)\['disable'].setValue(False)\n        continue\n    this_node.input(input_int)\['disable'].setValue(True)\n    "
  label "\[value which]\n\nThis node has callbacks. Summed up here:\n\nknobChanged:\nEnables only the Selected Write Node.\nRuns thru all the Write Nodes and add them as a selection in the Output Settings  Enumeration Knob of this Group.\n\n"
  selected true
  xpos 24
  ypos 753
  addUserKnob {20 User}
 }
 Output {
  name Frames_Output
  xpos 24
  ypos 1288
 }
 Write {
  inputs 0
  channels rgba
  checkHashOnRead false
  in_colorspace linear
  out_colorspace linear
  name default_writenode
  xpos 314
  ypos -55
  disable true
 }
end_group
push $cut_paste_input
Group {
 name center_extract
 onCreate "try:\n    node = nuke.thisNode()\n    viewer = nuke.activeViewer().node()\n    viewer\['input_process'].setValue(True)\n    viewer\['input_process_node'].setValue(node.name())\nexcept:\n    pass"
 tile_color 0xa57aaa00
 note_font "Bitstream Vera Sans"
 selected true
 xpos -196
 ypos 27
 hide_input true
 addUserKnob {20 User l Controls}
 addUserKnob {22 ip_set l "set as ip" T "try:\n    node = nuke.thisNode()\n    viewer = nuke.activeViewer().node()\n    viewer\['input_process'].setValue(True)\n    viewer\['input_process_node'].setValue(node.name())\nexcept:\n    pass" +STARTLINE}
 addUserKnob {41 aspect T controls.aspect}
 addUserKnob {26 spacer l " "}
 addUserKnob {41 overlay_color l "overlay color" T controls.overlay_color}
 addUserKnob {41 overlay_amnt l "overlay amount" T controls.overlay_amnt}
 addUserKnob {26 ""}
 addUserKnob {6 extract -STARTLINE}
}
 NoOp {
  inputs 0
  name controls
  xpos -273
  ypos -460
  addUserKnob {20 User}
  addUserKnob {7 aspect R 0 10}
  aspect 2.2
  addUserKnob {18 overlay_color l "overlay color"}
  overlay_color {0 0 0}
  addUserKnob {6 overlay_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 overlay_color_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 overlay_color_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 overlay_color_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 overlay_color_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 overlay_color_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 overlay_color_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 overlay_color_panelDropped_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 overlay_color_panelDropped_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 overlay_color_panelDropped_1_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {7 overlay_amnt l "overlay amount"}
  overlay_amnt 0.75
  addUserKnob {6 overlay_color_panelDropped_1_1_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Input {
  inputs 0
  name Input
  xpos -458
  ypos -578
 }
 Dot {
  name Dot1
  xpos -424
  ypos -496
 }
set N8762f70 [stack 0]
 Reformat {
  type "to box"
  box_width {{width x1001 2980}}
  name Reformat2
  xpos -458
  ypos -459
 }
 Reformat {
  type "to box"
  box_width {{(height*controls.aspect)>width?width:(height*controls.aspect)}}
  box_height {{(width/controls.aspect)>height?height:(width/controls.aspect)}}
  box_fixed true
  resize none
  pbb true
  name Reformat1
  xpos -458
  ypos -405
 }
 Reformat {
  type "to box"
  box_width {{width x1001 2980}}
  box_pixel_aspect {{Input.pixel_aspect}}
  name Reformat4
  xpos -458
  ypos -347
 }
set N8ee7cb0 [stack 0]
push $N8ee7cb0
 Shuffle {
  alpha white
  name Shuffle1
  xpos -568
  ypos -347
 }
 Reformat {
  type "to box"
  box_width {{Input.width}}
  box_height {{Input.height}}
  box_fixed true
  box_pixel_aspect {{Input.pixel_aspect}}
  resize none
  black_outside true
  name Reformat3
  xpos -568
  ypos -291
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop2
  xpos -568
  ypos -263
 }
 Invert {
  channels alpha
  name Invert1
  xpos -568
  ypos -240
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle2
  xpos -568
  ypos -198
 }
 Multiply {
  channels rgb
  value {{parent.controls.overlay_color} {parent.controls.overlay_color} {parent.controls.overlay_color} 1}
  name Multiply1
  xpos -568
  ypos -170
 }
 Multiply {
  channels alpha
  value {{parent.controls.overlay_amnt}}
  name Multiply2
  xpos -568
  ypos -142
 }
push $N8762f70
 Dot {
  name Dot2
  xpos -664
  ypos -496
 }
 Merge2 {
  inputs 2
  name Merge1
  xpos -698
  ypos -135
 }
 Dot {
  name Dot3
  xpos -664
  ypos -82
 }
 Switch {
  inputs 2
  which {{parent.extract}}
  name Switch1
  label "\[value which]"
  xpos -458
  ypos -94
 }
 Output {
  name Output1
  xpos -458
  ypos 1
 }
end_group
CheckerBoard2 {
 inputs 0
 color0 {0.01 0.01 0.01 1}
 color1 {0.05 0.05 0.05 1}
 color2 {0.01 0.01 0.01 1}
 color3 {0.05 0.05 0.05 1}
 centerlinecolor {0.1 0.1 0 1}
 name CheckerBoard3
 tile_color 0xe955ffff
 selected true
 xpos 184
 ypos -120
}
CheckerBoard2 {
 inputs 0
 color0 {0.01 0.01 0.01 1}
 color1 {0.05 0.05 0.05 1}
 color2 {0.01 0.01 0.01 1}
 color3 {0.05 0.05 0.05 1}
 centerlinecolor {0.1 0.1 0 1}
 name CheckerBoard2
 tile_color 0xe955ffff
 selected true
 xpos 182
 ypos 134
}
push $N9213c30
Dot {
 name Dot63
 tile_color 0xe955ffff
 selected true
 xpos 1163
 ypos -3238
}
Dot {
 name Dot64
 tile_color 0xe955ffff
 selected true
 xpos 1163
 ypos -767
}
Dot {
 name Dot65
 tile_color 0xe955ffff
 selected true
 xpos 862
 ypos -767
}
set N9259230 [stack 0]
Dot {
 name Dot1
 tile_color 0xe955ffff
 selected true
 xpos 862
 ypos -486
}
set N9294390 [stack 0]
CheckerBoard2 {
 inputs 0
 color0 {0.01 0.01 0.01 1}
 color1 {0.05 0.05 0.05 1}
 color2 {0.01 0.01 0.01 1}
 color3 {0.05 0.05 0.05 1}
 centerlinecolor {0.1 0.1 0 1}
 name CheckerBoard4
 tile_color 0xe955ffff
 selected true
 xpos 670
 ypos -2984
}
Dot {
 name Dot66
 tile_color 0xe955ffff
 selected true
 xpos 704
 ypos -2815
}
set N8efc880 [stack 0]
Dot {
 name Dot67
 tile_color 0xe955ffff
 selected true
 xpos 1061
 ypos -2815
}
Dot {
 name Dot68
 tile_color 0xe955ffff
 selected true
 xpos 1061
 ypos -871
}
Dot {
 name Dot69
 tile_color 0xe955ffff
 selected true
 xpos 858
 ypos -871
}
push $N9259230
push $N8efc880
Group {
 inputs 3
 name DasGrain3
 help "DasGrain makes re-graining as simple as clicking a few buttons.\n\nFollow the steps in the Help tab and you'll have a perfect regrain in no time!"
 onCreate "import random\n\ntestimonials = \[\n    \"Such an elegant solution, love it!\",\n    \"Your gizmo is beyond expectation\",\n    \"Totally awesome!\",\n    \"DasGrain is officially the best thing ever\",\n    \"It's really working!\",\n    \"Das bringt Tränen in meine Augen\",\n    \"DasGrain is the salvation we waited for\",\n    \"It's really working\",\n    \"I save a lot of time, and definitely my nerves :)\",\n    \"It's alright\",\n    ]\n\nnode = nuke.thisNode()\nnode\['testimonial'].setValue('<br><br><br><i>&laquo;%s&raquo;</i><br>— anonymous<br><br>' % random.choice(testimonials))\nnode\['box'].setFlag(nuke.NO_ANIMATION)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\n\nif k.name() == 'box':\n    this_frame = nuke.frame()\n    n\['sample_frame'].setValue(this_frame)"
 tile_color 0x7f7f7fff
 label "v1.5 | 2019-05-18"
 selected true
 xpos 670
 ypos -786
 addUserKnob {20 Analyse_tab l Analyse}
 addUserKnob {41 output t "<strong>regrained comp</strong> it is what it sais\n\n<strong>original grain</strong> plate minus degrained plate\n<strong>normalised grain</strong> check if the normalisation worked. It should be as even as possible. This is what you want to output if you want to prerender a grain plate. Later you can plug it into the <i>external grain</i> input of another DasGrain\n<strong>adapted grain</strong> check if the adaptation worked. Output this if you want to further manipulate the grain (who knows what the sup is gonna come up with...). After simply plus it to your comp.\n<strong>grain QC</strong> check if voronoi seams are visible (-> edgeblend), or the scattered grain looks different to the original plate grain (-> maybe bad sample area or wrong luminance degrain amount)" T Output.output}
 addUserKnob {26 spacer01_1 l " " T " "}
 addUserKnob {26 level l "<strong>Degrain amount"}
 addUserKnob {78 luminance t "Leave this at 1, if you're working on a completely degrained plate.\n\nIn case you decided to leave some luminance grain in the degrained plate (use the DegrainHelper node for this!), set this to the same value as in the DegrainHelper in order to compensate.\n\nIf the luminance degrain amount was set to 0.8, this needs to be set to 0.8 as well.\n\nDon't forget to use a mask of all elements that cover the plate." n 1}
 luminance 1
 addUserKnob {6 fix_ghosting l "fix ghosting" t "If your plate is repo'd or retimed and you want to use scattered grain everywhere, compensating for luminance grain will introduce plate detail back to the comp.\nEnable this to fix it." +STARTLINE}
 addUserKnob {26 divider01 l " "}
 addUserKnob {41 maskChannelMask1 l "grain level mask" T Multiply1.maskChannelMask}
 addUserKnob {41 invert_mask l invert -STARTLINE T Multiply1.invert_mask}
 addUserKnob {26 spacer02 l " " T " "}
 addUserKnob {26 divider02 l <strong>Analyse}
 addUserKnob {3 number_of_frames l "number of frames" t "Set the number of sample frames to be spread across the input range.\n\nMore frames lead to higher accuracy.\n\nIf there are particularly bright or dark frames, set them manually in the knob below.\n\nIf you want to set all sample frames manually, set this to 0 and add the frames in the knob below."}
 number_of_frames 10
 addUserKnob {1 additional_frames l "additional frames" t "Set additional frames like this:\n\n1001,1020,1053 (single frames)\n1020-1040 (frame ranges)\n1020-1040x4 (frame ranges with step)"}
 addUserKnob {3 sample_count l "sample count" t "The samples are spread across the sample range (which gets calculated automatically) based on the AlexaV3LogC curve. This results in more samples in the dark areas and less samples in the brights.\n\nMore samples lead to a more detailed response curve (while the accuracy is limited by the quality of the degrain)."}
 sample_count 20
 addUserKnob {22 analyse l Analyse t "this is where the magic happens" T "import nuke\n\n\ndef _sample_count(this):\n\n    # returns the sample count\n\n    sample_count = int(this\['sample_count'].value())\n    if sample_count <= 0:\n        raise RuntimeError('Enter a sample count greater than 0')\n\n    else:\n\n        return sample_count\n\n\ndef _generate_frame_list(this):\n\n    # converts the frames submitted by the user into a list\n\n    frame_list = \[]\n\n    number_of_frames = int(this\['number_of_frames'].value())\n    additional_frames = this\['additional_frames'].value()\n\n    if number_of_frames < 1 and additional_frames is '':\n        raise RuntimeError('Either set the number of frames > 0\\nor define additional frames')\n\n    first_frame = max(this.input(1).firstFrame(),\n                      this.input(2).firstFrame())\n    last_frame = min(this.input(1).lastFrame(),\n                     this.input(2).lastFrame())\n\n    if number_of_frames > 0:\n        distance = (last_frame - first_frame) / (number_of_frames)\n        frame = first_frame + distance / 2\n\n        for x in xrange(number_of_frames):\n            int_frame = int(round(frame))\n            if int_frame not in frame_list:\n                frame_list.append(int_frame)\n            frame += distance\n\n    frange = nuke.FrameRanges(additional_frames.split(','))\n    for r in frange:\n        for f in r:\n            if f >= first_frame and f <= last_frame:\n                if f not in frame_list:\n                    frame_list.append(f)\n    return frame_list\n\n\ndef _setup_for_multiframe(frame_list):\n\n    # arranges all sample frames next to each other, starting at frame 0\n    # sets the frame number knob of the FrameBlend node\n\n    tw_lookup = nuke.toNode('TimeWarp1')\['lookup']\n    tw_lookup.clearAnimated()\n    tw_lookup.setAnimated()\n    anim_list = \[]\n    for n in range(0, len(frame_list)):\n        anim_list.append(nuke.AnimationKey(n, frame_list\[n]))\n    anim = tw_lookup.animation(0)\n    anim.addKey(anim_list)\n\n    fb = nuke.toNode('FrameBlend1')\n    fb\['numframes'].setValue(len(frame_list))\n\n\ndef _generate_sample_list(\n    sample_count,\n    sample_range,\n    sample_radius\n    ):\n\n    # generate a list of sample values spread equally between the\n    # min and max values of the sample range\n\n    sample_list = \[]\n    for item in range(0, sample_count):\n        sample_list.append(float(item) / sample_count\n                           * (sample_range\[1] - sample_range\[0])\n                           + sample_range\[0] + sample_radius)\n    return sample_list\n\n\ndef _get_sample_range(\n    channel,\n    channel_list,\n    frame_list\n    ):\n\n    # samples the minimum and maximum values of the given frame range and\n    # sets the sample range to those values\n\n    TimeWarp_disable = nuke.toNode('TimeWarp1')\['disable']\n    CurveTool = nuke.toNode('CurveTool_Range')\n    min_knob = CurveTool\['minlumapixvalue']\n    max_knob = CurveTool\['maxlumapixvalue']\n\n    if channel is 'red':\n        TimeWarp_disable.setValue(False)\n\n        min_knob.clearAnimated()\n        max_knob.clearAnimated()\n\n        min_knob.setAnimated()\n        max_knob.setAnimated()\n\n        nuke.execute(CurveTool, 0, len(frame_list) - 1)\n\n    min_list = \[]\n    max_list = \[]\n\n    index = channel_list.index(channel)\n    for key in min_knob.animation(index).keys():\n        min_list.append(key.y)\n\n    for key in max_knob.animation(index).keys():\n        max_list.append(key.y)\n\n    min_value = min(min_list)\n    max_value = max(max_list)\n\n    if channel is 'blue':\n        TimeWarp_disable.setValue(True) #hopefully prevents slowing down the comp\n\n        min_knob.clearAnimated()\n        max_knob.clearAnimated()\n        CurveTool\['minlumapixdata'].clearAnimated()\n        CurveTool\['maxlumapixdata'].clearAnimated()\n\n    return \[min_value, max_value]\n\n\ndef _log2lin(value):\n\n    # converts values from AlexaV3LogC to linear\n\n    if value > 5.367655 * 0.010591 + 0.092809:\n        new_value = (10.0 ** ((value - 0.385537) / 0.247190) - 0.052272) / 5.555556\n    else:\n        new_value = (value - 0.092809) / 5.367655\n    return new_value\n\n\ndef _sample_it(\n    Keyer,\n    CurveTool,\n    frame_list,\n    channel_list,\n    channel,\n    sample,\n    sample_radius,\n    ):\n\n    # analyse the grain level per channel and sample value in the sample range\n\n    min = str(sample - sample_radius)\n    max = str(sample + sample_radius)\n    Keyer\['temp_expr0'].setValue(min)\n    Keyer\['temp_expr1'].setValue(max)\n\n    intensity_knob = CurveTool\['intensitydata']\n    intensity_knob.clearAnimated()\n    intensity_knob.setAnimated()\n\n    nuke.execute(CurveTool, len(frame_list) - 1, len(frame_list) - 1)\n    sample_values = intensity_knob.value()\n\n    intensity_knob.clearAnimated()\n\n    if sample_values\[3] > 0:\n        value = sample_values\[0] / sample_values\[3]\n\n        if value > 0:\n            return value\n        else:\n\n            return None\n    else:\n\n        return None\n\n\ndef check_inputs(this):\n    if this.input(1) is None:\n        raise RuntimeError('no plate connected')\n    if this.input(2) is None:\n        raise RuntimeError('no degrained plate connected')\n\n    def format_to_tuple(g):\n        \"\"\"returns (1024, 786, 2.0)\n        \"\"\"\n        return (g.format().width(), g.format().height(), g.format().pixelAspect())\n\n    format_set = set(\[\n        format_to_tuple(this.input(1)),\n        format_to_tuple(this.input(2)),\n        ])\n    if len(format_set) != 1:\n        raise RuntimeError(\"Format missmatch: Make sure the formats of plate and degrained plate match.\")\n\ndef start():\n\n    # let's do this!\n\n    this = nuke.thisNode()\n\n    check_inputs(this)\n\n    with this:\n        frame_list = _generate_frame_list(this)\n        _setup_for_multiframe(frame_list)\n        sample_count = _sample_count(this)\n\n        blank = 'bWFzdGVyIHt9CiAgICAgICAgcmVkIHtjdXJ2ZX0KICAgICAgICBncmVlbiB7Y3VydmV9CiAgICAgICAgYmx1ZSB7Y3VydmV9CiAgICAgICAgYWxwaGEge30='.decode(\"base64\")\n\n        lut = nuke.toNode('ColorLookup')\['lut']\n        lut.fromScript(blank)\n\n        channel_list = \['red', 'green', 'blue']\n\n        Keyer = nuke.toNode('Expression2')\n        Copy = nuke.toNode('Copy2')\n\n        CurveTool = nuke.toNode('CurveTool')\n\n        task = nuke.ProgressTask('Analysing...')\n        step = 100.0 / 3 / sample_count\n        progress = step\n\n        TimeWarp_disable = nuke.toNode('TimeWarp2')\['disable']\n        FrameBlend_disable = nuke.toNode('FrameBlend1')\['disable']\n\n        TimeWarp_disable.setValue(False)\n        FrameBlend_disable.setValue(False)\n\n        for channel in channel_list:\n            Copy\['from0'].setValue('rgba.\{\}'.format(channel))\n\n            sample_range = _get_sample_range(channel, channel_list, frame_list)\n            sample_radius = (sample_range\[1] - sample_range\[0]) / sample_count / 2\n            sample_list = _generate_sample_list(sample_count, sample_range, sample_radius)\n\n            for sample in sample_list:\n                if task.isCancelled():\n                    return\n\n                task.setProgress(int(progress))\n                task.setMessage('\{\} channel at \{\}'.format(channel, round(_log2lin(sample), 2)))\n\n                value = _sample_it(\n                    Keyer,\n                    CurveTool,\n                    frame_list,\n                    channel_list,\n                    channel,\n                    sample,\n                    sample_radius,\n                    )\n\n                if value is not None:\n                    lut.setValueAt(value, _log2lin(sample),\n                            channel_list.index(channel) + 1)\n\n                progress += step\n\n        tw_lookup = nuke.toNode('TimeWarp1')\['lookup']\n        tw_lookup.clearAnimated()\n        TimeWarp_disable.setValue(True) #hopefully prevents slowing down the comp\n        FrameBlend_disable.setValue(True) #hopefully prevents slowing down the comp\n\n        del task\n\n\nstart()\n" +STARTLINE}
 addUserKnob {26 divider03 l " "}
 addUserKnob {41 maskChannelMask l "analysis mask" T ChannelMerge1.A}
 addUserKnob {6 invert_1 l invert -STARTLINE}
 addUserKnob {20 Adjust_tab l Adjust}
 addUserKnob {41 output_1 l output t "<strong>regrained comp</strong> it is what it sais\n\n<strong>original grain</strong> plate minus degrained plate\n<strong>normalised grain</strong> check if the normalisation worked. It should be as even as possible. This is what you want to output if you want to prerender a grain plate. Later you can plug it into the <i>external grain</i> input of another DasGrain\n<strong>adapted grain</strong> check if the adaptation worked. Output this if you want to further manipulate the grain (who knows what the sup is gonna come up with...). After simply plus it to your comp.\n<strong>grain QC</strong> check if voronoi seams are visible (-> edgeblend), or the scattered grain looks different to the original plate grain (-> maybe bad sample area or wrong luminance degrain amount)" T Output.output}
 addUserKnob {26 spacer03_2 l " " T " "}
 addUserKnob {26 divider04 l <strong>Adjust}
 addUserKnob {22 whatsthis l "What am I looking at?" T "nuke.message(\"In the RGB channels are the sampled grain response curves. Their quality depends entirely on the quality of the degrain. If the curves look wrong, try to improve the degrain first. If they still look wrong and the resulting regrain doesn't work well enough, you can try to improve the curves here. You can also extend the curves if the comp has values that don't exist in the plate. Don't touch the master curve though.\\n\\nNote: Slope of curves should always be positive (always going up ↗)\")" +STARTLINE}
 addUserKnob {41 lut l "" +STARTLINE T ColorLookup.lut}
 addUserKnob {20 Replace_tab l Replace}
 addUserKnob {41 output_2 l output t "<strong>regrained comp</strong> it is what it sais\n\n<strong>original grain</strong> plate minus degrained plate\n<strong>normalised grain</strong> check if the normalisation worked. It should be as even as possible. This is what you want to output if you want to prerender a grain plate. Later you can plug it into the <i>external grain</i> input of another DasGrain\n<strong>adapted grain</strong> check if the adaptation worked. Output this if you want to further manipulate the grain (who knows what the sup is gonna come up with...). After simply plus it to your comp.\n<strong>grain QC</strong> check if voronoi seams are visible (-> edgeblend), or the scattered grain looks different to the original plate grain (-> maybe bad sample area or wrong luminance degrain amount)" T Output.output}
 addUserKnob {26 spacer04 l " " T " "}
 addUserKnob {26 divider05 l "<strong>External Grain"}
 addUserKnob {6 external_grain l "use external grain" t "Use external grain from a second DasGrain, with the output set to 'normalised grain', to replace masked area.\nConnect it to the 'external grain' input of this DasGrain (it's a bit hidden on the left side of the node)." +STARTLINE}
 addUserKnob {26 spacer05 l " " T " "}
 addUserKnob {26 divider06 l <strong>Scatter}
 addUserKnob {6 scatter l activate t "Activates the scatter function. It generates a new grain based on the grain in the sample box using a Voronoi noise." +STARTLINE}
 addUserKnob {15 box l "sample box" t "Define an area that is used as a source for the scatter function. The grain in this area should be as even as possible, without any visible plate detail."}
 box {2251 2255 2934 2475}
 addUserKnob {3 sample_frame l "sample frame" t "The frame at which the grain is being sampled. Is set automatically once the sample box is changed." +DISABLED}
 sample_frame 1043
 addUserKnob {26 spacer06 l "" +STARTLINE T " "}
 addUserKnob {6 overlay l "overlay cell pattern" t "Overlay the cell pattern of the voronoy noise. Useful to check where the seams are and if distortion or blending is necessary." +STARTLINE}
 addUserKnob {7 cell_size l "cell size" t "Cell size of the scatter. Shoudn't be too small, as lower grain frequencies might break.\nCan't be too big either, to prevent it from breaking the border of the samplebox (will error if it does)." R 5 100}
 cell_size 40
 addUserKnob {26 spacer07 l "" +STARTLINE T " "}
 addUserKnob {20 concealer l "edge concealer" n 1}
 concealer 0
 addUserKnob {26 concealer_help l " " T "If you can see the voronoi pattern in the grain QC output,\nincrease the edge blend size."}
 addUserKnob {3 edge_blend_size l "edge blend size" t "Set the output to grain QC. If you see the cell seams, increase the edge blend size to conceal them.\n\nThis is a bit hacky and slow."}
 addUserKnob {26 tip l "" -STARTLINE T "sloooow - keep this below 3 if possible"}
 addUserKnob {26 distortion_help l " " T "\nDistortion might help as well, if somehow the straight\nseams are visible (you might want to toggle the overlay\nwhile adjusting)."}
 addUserKnob {7 amplitude R 0 50}
 addUserKnob {7 frequency R 0 50}
 frequency 15
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 divider07 l "" +STARTLINE}
 addUserKnob {41 maskChannelMask_1 l "replace mask" -STARTLINE T Merge9.maskChannelMask}
 addUserKnob {41 invert_mask_1 l invert -STARTLINE T Merge9.invert_mask}
 addUserKnob {20 Help_tab l Help}
 addUserKnob {26 basic_setup l "" +STARTLINE T "<font size=\"5\">Basic setup</font>"}
 addUserKnob {26 ""}
 addUserKnob {26 explanation l "" +STARTLINE T "<strong>Bold</strong> steps are always necessary"}
 addUserKnob {26 steps l "" +STARTLINE T "<br><strong>1. Connect <i>plate</i>, <i>degrained plate</i> and <i>comp</i>.</strong><br>2. Set the <i>luminance degrain amount</i>.<br><strong>3. Press the <i>Analyse</i> button.</strong><br>4. Correct the <i>response curves</i> in the Adjust tab.<br>5. Move the <i>sample box</i> to an area without any plate detail and activate <i>scatter</i>.<br>6. If necessary, activate <i>edge blend</i> and/or <i>distortion</i> to conceal seams."}
 addUserKnob {26 in_depth l "" +STARTLINE T "<br>For an in depth explanation of the steps, read the tooltips and check out this video:<br><a href=\"https://vimeo.com/284820390/\"><span style=\"color:#C8C8C8;\">https://vimeo.com/284820390</a>"}
 addUserKnob {26 pushthebutton l "" +STARTLINE T "<br><br>If the result is not as expected and you don't know why, push this button:"}
 addUserKnob {22 troubleshoot l Troubleshoot t HEEEEEEELP T "messages = \[]\n\nthis = nuke.thisNode()\n\n#########################\n\nif this.input(0) is None or this.input(1) is None or this.input(2) is None:\n    messages.append(\"<font color='red'><strong>ERROR</strong></font> Plate, degrained plate and comp need to be connected to the appropriate inputs.\")\n\n#########################\n\nelse:\n\n    def format_to_tuple(g):\n        \"\"\"returns (1024, 786, 2.0)\n        \"\"\"\n        return (g.format().width(), g.format().height(), g.format().pixelAspect())\n\n    format_set = set(\[\n        format_to_tuple(this.input(0)),\n        format_to_tuple(this.input(1)),\n        format_to_tuple(this.input(2)),\n        ])\n    if len(format_set) != 1:\n        messages.append(\"<font color='orange'><strong>WARNING</strong></font> Format missmatch: Make sure formats of plate, degrained plate and comp match.\")\n\n    if (this.input(1).firstFrame() != this.input(2).firstFrame()) or (this.input(1).lastFrame() != this.input(2).lastFrame()):\n        messages.append(\"<font color='orange'><strong>WARNING</strong></font> The frame ranges of plate and degrained plate don't match. Double check that they belong together.\")\n\n#########################\n\nmessages.append(\"Double check that plate and degrained plate haven't been modified in any way (paint, despill, etc).\")\n\n#########################\n\nif this\['luminance'].getValue() == 1:\n    messages.append(\"Are you working on a completely degrained plate? If not, you might have to set the luminance degrain amount.\")\n\n#########################\n\nblank = 'bWFzdGVyIHt9CnJlZCB7fQpncmVlbiB7fQpibHVlIHt9CmFscGhhIHt9'.decode(\"base64\")\n\nwith this:\n    ColorLookup = nuke.toNode('ColorLookup')     \n    if ColorLookup\['lut'].toScript() == blank:\n        messages.append(\"<font color='red'><strong>ERROR</strong></font> You haven't pressed the Analyse button yet!\")\n\n#########################\n\nclass BadThings(Exception): pass\n\ndef thingy():\n    with this:\n        ColorLookup = nuke.toNode('ColorLookup')\n        list = this\['lut'].toScript().replace('\}','').split('\\n')\n        for item in list\[1:-1]:\n            sample_value = 0\n            for value in item.split(' '):\n                try:\n                    value == float(value)\n                    if value < sample_value:\n                        raise BadThings(\"<font color='orange'><strong>WARNING</strong></font> Check and fix the response curves. Their slopes should always be positive (the curves should always go up &#8599;).\")\n                        \n                    else:\n                        sample_value = value\n                except ValueError:\n                    # Ignore non-numeric things like x-values of \"x5.46\" and channel names like \"red\{\" etc\n                    pass\ntry:\n    thingy()\nexcept BadThings as e:\n    messages.append(str(e))\n    \n#########################\n\nif this\['scatter'].value() == True:\n    if this\['box'].getValue() == \[100.0, 100.0, 500.0, 300.0]:\n        messages.append(\"<font color='orange'><strong>WARNING</strong></font> Scatter has been activated, but the sample box is still in its default position. Are you sure that's a good area to sample?\")\n\n#########################\n\nmessages.append(\"Did you copy/paste DasGrain from another script? Make sure to reanalyse and to reset the sample area if you are using scatter.\")\n\n#########################\n\nif len(messages) > 0:\n    nuke.message(\"<font size=\\\"5\\\">Things worth checking</font><br><br>\"\n                               \"%s<br><br><br>If any of this doesn't make sense to you, it might be worth checking out the video on vimeo.\" % (\n                                  \"<hr>\".join(\"%s: %s\" % (i+1, m) for i, m in enumerate(messages))))\n" +STARTLINE}
 addUserKnob {26 dont_despair l "" +STARTLINE T "<br>If it still doesn't work and you're about to flip the table, send me a mail.<br>I'm happy to help! :)"}
 addUserKnob {20 Info_tab l Info}
 addUserKnob {26 dasname l "" +STARTLINE T "<font size='7'>DasGrain</font> v1.5"}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "Last change: 2019-05-18\n"}
 addUserKnob {26 name_1 l "" +STARTLINE T "\nFabian Holtz"}
 addUserKnob {26 mail l "" +STARTLINE T "<a href=\"mailto:holtzf+nuke@gmail.com\"><span style=\"color:#C8C8C8;\">holtzf+nuke@gmail.com</a>"}
 addUserKnob {26 testimonial l "" +STARTLINE T "<br><br><br><i>&laquo;Das bringt Tränen in meine Augen&raquo;</i><br>— anonymous<br><br>"}
 addUserKnob {26 ""}
 addUserKnob {26 credit l "" +STARTLINE T "<br>VoronoiScatter based on Ivan Busquets' implementation of libNoise's\nVoronoi generator"}
 addUserKnob {26 website l "" +STARTLINE T "<a href=\"http://www.nukepedia.com/blink/image/voronoi/\"><span style=\"color:#C8C8C8;\">http://www.nukepedia.com/blink/image/voronoi/</a>"}
 addUserKnob {26 ""}
 addUserKnob {26 thanks l "" +STARTLINE T "<br>Special thanks to Ben Dickson for bearing with my questions and<br>problems and RSP comp for the valuable feedback."}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x7f7f7fff
  label "normalise grain"
  note_font_size 30
  xpos 280
  ypos 1470
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode11
  tile_color 0x7f7f7fff
  label "add grain"
  note_font_size 30
  xpos 830
  ypos 2574
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode13
  tile_color 0x7f7f7fff
  label scatter
  note_font_size 30
  xpos -50
  ypos 1830
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode14
  tile_color 0x7f7f7fff
  label "analyse grain"
  note_font_size 30
  xpos -159
  ypos 606
  bdwidth 319
  bdheight 720
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x7f7f7fff
  label "grain response curve"
  note_font_size 30
  xpos 610
  ypos 2382
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0x7f7f7fff
  label QC
  note_font_size 30
  xpos 1050
  ypos 2862
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode4
  tile_color 0x7f7f7fff
  label "grain response curve"
  note_font_size 30
  xpos 610
  ypos 1230
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode5
  tile_color 0x7f7f7fff
  label "adapt grain"
  note_font_size 30
  xpos 280
  ypos 2382
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode6
  tile_color 0x7f7f7fff
  label "sample range"
  note_font_size 30
  xpos -490
  ypos 606
  bdwidth 320
  bdheight 160
 }
 BackdropNode {
  inputs 0
  name BackdropNode7
  tile_color 0x7f7f7fff
  label "luminance level"
  note_font_size 30
  xpos 280
  ypos -282
  bdwidth 760
  bdheight 685
 }
 BackdropNode {
  inputs 0
  name BackdropNode8
  tile_color 0x7f7f7fff
  label "original grain"
  note_font_size 30
  xpos 280
  ypos 606
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode9
  tile_color 0x7f7f7fff
  label replace
  note_font_size 30
  xpos 60
  ypos 1999
  bdwidth 540
  bdheight 226
 }
 Input {
  inputs 0
  name mask
  label "\[value number]"
  note_font_size 30
  xpos 1170
  ypos -680
  number 3
 }
 Dot {
  name Dot39
  xpos 1204
  ypos 258
 }
set N97675b0 [stack 0]
 Dot {
  name Dot26
  xpos 1204
  ypos 1074
 }
set N976c150 [stack 0]
 Dot {
  name Dot38
  xpos 1204
  ypos 1650
 }
 Dot {
  name Dot37
  xpos 544
  ypos 1650
 }
 Dot {
  name Dot22
  xpos 544
  ypos 2079
 }
set N977a480 [stack 0]
 Dot {
  name Dot20
  xpos 544
  ypos 2199
 }
push $N977a480
 Dot {
  name Dot17
  xpos 434
  ypos 2079
 }
set N9783b50 [stack 0]
 Dot {
  name Dot13
  xpos 214
  ypos 2079
 }
 Input {
  inputs 0
  name external_grain
  label "\[value number]"
  note_font_size 30
  xpos -150
  ypos 1524
  number 4
 }
 Dot {
  name Dot21
  xpos -116
  ypos 1746
 }
 Input {
  inputs 0
  name DEGRAINED_PLATE
  label "\[value number]"
  note_font_size 30
  xpos 730
  ypos -680
  number 2
 }
 Dot {
  name Dot9
  xpos 764
  ypos -390
 }
set N979b4d0 [stack 0]
 Dot {
  name Dot28
  xpos 764
  ypos -198
 }
set N97a0030 [stack 0]
 Dot {
  name Dot32
  xpos 764
  ypos 234
 }
set N97a4bb0 [stack 0]
push $N97a0030
 Dot {
  name Dot27
  xpos 624
  ypos -198
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace1
  xpos 590
  ypos -130
 }
 Dot {
  name Dot7
  xpos 624
  ypos -54
 }
set N97c6f80 [stack 0]
 Input {
  inputs 0
  name PLATE
  label "\[value number]"
  note_font_size 30
  xpos 290
  ypos -680
  number 1
 }
 Dot {
  name Dot29
  xpos 324
  ypos -198
 }
set N97d0540 [stack 0]
 Dot {
  name Dot6
  xpos 464
  ypos -198
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace2
  xpos 430
  ypos -130
 }
 Merge2 {
  inputs 2
  operation from
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge4
  xpos 430
  ypos -58
 }
 Multiply {
  channels rgb
  value {{1/parent.luminance-1} 0 0 0}
  name Multiply6
  xpos 430
  ypos 14
 }
 Dot {
  name Dot31
  xpos 464
  ypos 90
 }
push $N97c6f80
 Merge2 {
  inputs 2
  operation plus
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge5
  xpos 590
  ypos 86
 }
 Colorspace {
  colorspace_in YCbCr
  name Colorspace3
  xpos 590
  ypos 158
 }
 Merge2 {
  inputs 2
  operation from
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge6
  xpos 590
  ypos 230
 }
 Dot {
  name Dot35
  xpos 624
  ypos 306
 }
set N984cc70 [stack 0]
push $N97a4bb0
 Merge2 {
  inputs 2
  operation from
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge7
  xpos 730
  ypos 302
  disable {{Multiply6.value.r==0}}
 }
 Dot {
  name Dot2
  xpos 764
  ypos 522
 }
set N9861e60 [stack 0]
 ColorLookup {
  channels rgb
  lut {master {}
    red {curve x0.003194018034 0.001337344845 x0.01021253224 0.001461135086 x0.01846615784 0.001619122105 x0.03018433042 0.001843542591 x0.04682860151 0.002125825029 x0.07046981156 0.002461226867 x0.1040493324 0.002957768266 x0.1517450511 0.003604405677 x0.219491154 0.004357707861 x0.3157164454 0.005225462862 x0.4523930252 0.006805006175 x0.6465258598 0.009035553878 x0.9222684503 0.01110332323 x1.313928008 0.01373079366 x1.870233893 0.01941978403 x2.660400152 0.02577695751 x3.782737494 0.03570852386 x5.37688446 0.04199175212 x7.641180038 0.06380390594 x10.85734272 0.06565838168}
    green {curve x0.003742650151 0.001102130487 x0.01074534468 0.001228843746 x0.01919428632 0.001406541304 x0.03118512966 0.001628192715 x0.04820268974 0.001881602098 x0.0723542273 0.002238462851 x0.1066303924 0.002691193172 x0.1552755684 0.003205275699 x0.224313423 0.003809310239 x0.3222928345 0.004754013647 x0.4613464475 0.006217687657 x0.6586930752 0.007646684588 x0.9387699962 0.009451196564 x1.33625865 0.01251527586 x1.900379658 0.0174889301 x2.700987339 0.02152302433 x3.837219954 0.02920986498 x5.449775696 0.03733252444 x7.738335609 0.05962081706 x10.98628902 0.06066095272}
    blue {curve x0.002467317972 0.001545393305 x0.009064159356 0.001703688112 x0.01636158675 0.001913459081 x0.02643137239 0.002140442229 x0.04043590277 0.002466227941 x0.05991267413 0.002867166817 x0.08699995279 0.00335308064 x0.1246715263 0.00387489992 x0.177063182 0.004573847291 x0.2499267608 0.0056069505 x0.3512616456 0.006985691152 x0.4921928942 0.008550612615 x0.6881927252 0.01059472948 x0.9607790709 0.01400718608 x1.339877844 0.01910169793 x1.867108822 0.02607044775 x2.600353956 0.03037158189 x3.620113134 0.04000562434 x5.038341045 0.05601658055 x7.010738373 0.06719969997}
    alpha {}}
  name ColorLookup
  xpos 730
  ypos 1304
 }
 set C9867630 [stack 0]
 Dot {
  name Dot24
  xpos 764
  ypos 1554
 }
 Expression {
  temp_name0 target
  temp_expr0 .01
  expr0 target/r
  expr1 target/g
  expr2 target/b
  channel3 none
  name Expression
  xpos 400
  ypos 1550
 }
push $N9861e60
 Dot {
  name Dot30
  xpos 544
  ypos 690
 }
push $N97d0540
 Merge2 {
  inputs 2
  operation from
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge27
  xpos 290
  ypos 686
  bookmark true
 }
 Dot {
  name Dot3
  xpos 324
  ypos 786
 }
set N98a2c50 [stack 0]
 Dot {
  name Dot33
  xpos 324
  ypos 1386
 }
 Merge2 {
  inputs 2
  operation multiply
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge2
  xpos 290
  ypos 1550
 }
 Dot {
  name Dot15
  xpos 324
  ypos 1650
 }
set N98bc680 [stack 0]
 Dot {
  name Dot25
  xpos 104
  ypos 1650
 }
 Switch {
  inputs 2
  which {{parent.external_grain}}
  name Switch2
  xpos 70
  ypos 1742
 }
 Group {
  name VoronoiScatter
  selected true
  xpos 70
  ypos 1910
  disable {{!parent.scatter}}
  addUserKnob {20 User}
  addUserKnob {15 box}
  box {{parent.box} {parent.box} {parent.box} {parent.box}}
  addUserKnob {3 sample_frame l "sample frame"}
  sample_frame {{parent.sample_frame}}
  addUserKnob {7 cell_size l "cell size" R 0 100}
  cell_size {{parent.cell_size}}
  addUserKnob {6 overlay_pattern l "overlay pattern" -STARTLINE}
  overlay_pattern {{parent.overlay}}
  addUserKnob {3 edge_blend_size l "edge blend size"}
  edge_blend_size {{parent.edge_blend_size}}
  addUserKnob {7 amplitude R 0 100}
  amplitude {{parent.amplitude}}
  addUserKnob {7 frequency R 0 100}
  frequency {{parent.frequency}}
  addUserKnob {41 VoroNoise_Seed l Seed T VoroNoise.VoroNoise_Seed}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width {{Input1.width}}
   box_height {{Input1.height}}
   box_fixed true
   box_pixel_aspect {{Input1.pixel_aspect}}
   resize distort
   center false
   black_outside true
   name Reformat1
   xpos 510
   ypos -658
  }
  Dot {
   name Dot6
   xpos 544
   ypos -606
  }
set N98e9180 [stack 0]
  Dot {
   name Dot7
   xpos 874
   ypos -606
  }
  Noise {
   output {rgba.red -rgba.green -rgba.blue none}
   replace true
   size {{parent.frequency} {size.0*pixel_aspect}}
   zoffset {{x+1000}}
   nyquist false
   gamma 1
   center {960 453.5}
   name Noise1
   xpos 840
   ypos -514
  }
  Noise {
   output {-rgba.red rgba.green -rgba.blue none}
   replace true
   size {{parent.Noise1.size} {parent.Noise1.size}}
   zoffset {{x}}
   gamma 1
   center {960 453.5}
   name Noise2
   xpos 840
   ypos -466
  }
  Clamp {
   name Clamp1
   xpos 840
   ypos -424
  }
  Dot {
   name Dot11
   xpos 874
   ypos -366
  }
push $N98e9180
  BlinkScript {
   kernelSourceFile C:/Users/fab/Downloads/voronoi.blink
   recompileCount 91
   ProgramGroup 1
   KernelDescription "2 \"VoroNoise\" iterate pixelWise c117be128a07c11b6d82fd34148d66b3bcac41976ec9c2082affe38e890c2c0f 2 \"src\" Read Point \"dst\" Write Point 6 \"Frequency\" Float 1 AABIQg== \"Seed\" Int 1 AAAAAA== \"aspect ratio\" Float 1 AACAPw== \"width\" Int 1 AAAAAA== \"height\" Int 1 AAAAAA== \"Randomness\" Float 1 AAAAPw== 6 \"frequency\" 1 1 \"seed\" 1 1 \"aspect_ratio\" 1 1 \"width\" 1 1 \"height\" 1 1 \"randomness\" 1 1 0"
   kernelSource "// Voronoi.blink\n// A test implementation of libNoise's Voronoi generator using Blink\n// Ivan Busquets - August 2013\n// Modified for DasGrain by Fabian Holtz - April 2019\n\n#define X_NOISE_GEN  1619\n#define Y_NOISE_GEN  31337\n#define Z_NOISE_GEN  6971\n#define SEED_NOISE_GEN  1013\n#define SQRT_3 1.73205081\n\ninline int IntValueNoise3D (int x, int y, int z, int seed)\n\{\n  // All constants are primes and must remain prime in order for this noise\n  // function to work correctly.\n  int n = (\n      X_NOISE_GEN    * x\n    + Y_NOISE_GEN    * y\n    + Z_NOISE_GEN    * z\n    + SEED_NOISE_GEN * seed)\n    & 0x7fffffff;\n  n = (n >> 13) ^ n;\n  return (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;\n\}\n\ninline float ValueNoise3D (int x, int y, int z, int seed)\n\{\n  return 1.0 - ((float)IntValueNoise3D (x, y, z, seed) / 1073741824.0);\n\}\n\nkernel VoroNoise : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead> src;\n  Image<eWrite, eAccessPoint> dst;\n\nparam:\n  float frequency;\n  int seed;\n  float aspect_ratio;\n  int width;\n  int height;\n  float randomness;\n\n\n  void define() \{\n    defineParam(frequency, \"Frequency\", 50.0f);\n    defineParam(aspect_ratio, \"aspect ratio\", 1.0f);\n    defineParam(seed, \"Seed\", 0);\n    defineParam(randomness, \"Randomness\", 0.5f);\n  \}\n\n\n\n\n  void process(int2 pos) \{\n   float x = pos.x * aspect_ratio * frequency / width;\n   float y = pos.y * frequency / width;\n   int xInt = (x > 0.0) ? x : x - 1;\n   int yInt = (y > 0.0) ? y : y - 1;\n\n\n    float minDist = 2147483647.0;\n    float xCandidate = 0;\n    float yCandidate = 0;\n\n    float dist;\n\nfor (int yCur = yInt - 2; yCur <= yInt + 2; yCur++) \{\n      for (int xCur = xInt - 2; xCur <= xInt + 2; xCur++) \{\n\n        // Calculate the position and distance to the seed point inside of\n        // this unit cube. Limited by the randomness value\n        float xPos = xCur + (ValueNoise3D (xCur, yCur, 0, seed    ) + 1 ) * randomness + (1-randomness) - 1;\n        float yPos = yCur + (ValueNoise3D (xCur, yCur, 0, seed + 1) + 1 ) * randomness + (1-randomness) - 1;\n\n        float xDist = xPos - x;\n        float yDist = yPos - y;\n\n        dist = pow(xDist, 2) + pow(yDist, 2);\n        if (dist < minDist) \{\n          // This seed point is closer to any others found so far, so record\n          // this seed point.\n          minDist = dist;\n          xCandidate = xPos;\n          yCandidate = yPos;\n\t\}\n    \}\n\}\n\n    SampleType(dst) sample(0.0f);\n\n    sample.x = xCandidate / aspect_ratio / frequency;\n    sample.y = yCandidate / height * width / frequency;\n    sample.z = 0;\n\n    dst() = sample;\n\}\n\};"
   rebuild ""
   VoroNoise_Frequency {{width/parent.cell_size}}
   VoroNoise_Seed {{x*5}}
   "VoroNoise_aspect ratio" {{pixel_aspect}}
   VoroNoise_width {{width}}
   VoroNoise_height {{height}}
   rebuild_finalise ""
   name VoroNoise
   xpos 620
   ypos -520
  }
  Copy {
   inputs 2
   from0 rgba.red
   to0 forward.u
   from1 rgba.green
   to1 forward.v
   name Copy1
   xpos 620
   ypos -382
   disable {{parent.amplitude==0}}
  }
  IDistort {
   uv forward
   uv_offset 0.5
   uv_scale {{parent.amplitude} {uv_scale.w*pixel_aspect}}
   filter Impulse
   name IDistort1
   xpos 620
   ypos -280
   disable {{parent.amplitude==0}}
  }
  Dot {
   name Dot5
   xpos 654
   ypos -174
  }
set Nb12c3d0 [stack 0]
  Dot {
   name Dot12
   xpos 764
   ypos -174
  }
set Nb1310a0 [stack 0]
  Dot {
   name Dot13
   xpos 764
   ypos 114
  }
push $Nb1310a0
  Dot {
   name Dot8
   xpos 874
   ypos -174
  }
  Blur {
   channels rgb
   size {{pixel_aspect} 1}
   name Blur1
   label "\[value size]"
   xpos 840
   ypos -88
  }
  Difference {
   inputs 2
   name Difference2
   xpos 840
   ypos 104
  }
  Expression {
   channel0 {none none none rgba.alpha}
   expr0 a>1e-9
   channel1 none
   channel2 none
   channel3 none
   name Expression2
   xpos 840
   ypos 206
  }
  Shuffle {
   red alpha
   green alpha
   blue alpha
   name Shuffle1
   label "\[value in]:\[value out]"
   xpos 840
   ypos 296
  }
  Dot {
   name Dot4
   xpos 874
   ypos 834
  }
push $Nb12c3d0
  NoTimeBlur {
   name NoTimeBlur3
   xpos 620
   ypos -82
  }
  Transform {
   translate {{floor((x*size)%1*(size))-int(size/2) x1082 0} {floor(x%1*(size))-int(size/2) x1082 0}}
   center {1064 714}
   filter Impulse
   black_outside false
   name Transform1
   xpos 620
   ypos 14
   disable {{parent.edge_blend_size<1}}
   addUserKnob {20 User}
   addUserKnob {3 size}
   size {{parent.edge_blend_size+1}}
  }
  Dot {
   name Dot9
   xpos 654
   ypos 114
  }
set Nb190000 [stack 0]
push $N98e9180
  Expression {
   expr0 (x+.5)/width
   expr1 (y+.5)/height
   expr2 0
   name STMapGenerator
   xpos 400
   ypos -514
  }
  NoTimeBlur {
   name NoTimeBlur2
   xpos 400
   ypos -82
  }
  Merge2 {
   inputs 2
   operation from
   Achannels {rgba.red rgba.green -rgba.blue none}
   Bchannels {rgba.red rgba.green -rgba.blue none}
   output {rgba.red rgba.green -rgba.blue none}
   name Merge2
   xpos 400
   ypos 110
  }
  Dot {
   name Dot10
   xpos 434
   ypos 282
  }
push $Nb190000
  Expression {
   expr0 random(r*1000000,0)*(maxx-minx)+minx
   expr1 random(g*1000000,0)*(maxy-miny)+miny
   channel2 none
   channel3 none
   name Expression3
   selected true
   xpos 620
   ypos 182
   addUserKnob {20 User}
   addUserKnob {7 frequency R 0 100}
   frequency {{parent.parent.cell_size}}
   addUserKnob {7 multiplier R 0 3}
   multiplier 0.5
   addUserKnob {15 shrink}
   shrink {{frequency*multiplier+ceil(parent.edge_blend_size/2)+IDistort1.uv_scale.w/2} {frequency*multiplier+ceil(parent.edge_blend_size/2)+IDistort1.uv_scale.h/2} {frequency*multiplier+floor(parent.edge_blend_size/2)+IDistort1.uv_scale.w/2} {frequency*multiplier+floor(parent.edge_blend_size/2)+IDistort1.uv_scale.h/2}}
   addUserKnob {26 ""}
   addUserKnob {7 minx}
   minx {{(parent.box.x+shrink.x+.5)/width}}
   addUserKnob {7 maxx}
   maxx {{(parent.box.r-shrink.r+.5)/width}}
   addUserKnob {7 miny}
   miny {{(parent.box.y+shrink.y+.5)/height}}
   addUserKnob {7 maxy}
   maxy {{(parent.box.t-shrink.t+.5)/height}}
  }
  Merge2 {
   inputs 2
   operation plus
   Achannels {rgba.red rgba.green -rgba.blue none}
   Bchannels {rgba.red rgba.green -rgba.blue none}
   output {rgba.red rgba.green -rgba.blue none}
   name Merge3
   xpos 620
   ypos 278
  }
  Expression {
   expr0 r<minx?maxx-(minx-r):(r-minx)%(maxx-minx)+minx
   expr1 g<miny?maxy-(miny-g):(g-miny)%(maxy-miny)+miny
   channel2 none
   channel3 none
   name Expression7
   xpos 620
   ypos 350
   addUserKnob {20 User}
   addUserKnob {7 minx}
   minx {{(parent.box.x+rint(x%1*parent.edge_blend_size)+.5)/width}}
   addUserKnob {7 maxx}
   maxx {{(parent.box.r+rint(x%1*parent.edge_blend_size)+.5)/width}}
   addUserKnob {7 miny}
   miny {{(parent.box.y+rint(x%1*parent.edge_blend_size)+.5)/height}}
   addUserKnob {7 maxy}
   maxy {{(parent.box.t+rint(x%1*parent.edge_blend_size)+.5)/height}}
  }
  Dot {
   name Dot3
   xpos 654
   ypos 426
  }
  Input {
   inputs 0
   name Input1
   xpos 180
   ypos -664
  }
  FrameHold {
   first_frame {{parent.sample_frame}}
   name FrameHold1
   xpos 180
   ypos -184
  }
  NoTimeBlur {
   name NoTimeBlur1
   xpos 180
   ypos -82
  }
  STMap {
   inputs 2
   channels rgb
   uv rgb
   filter Impulse
   name STMap1
   xpos 180
   ypos 422
  }
set Nb20c2a0 [stack 0]
  TimeBlur {
   divisions {{max(Transform1.size==1?2:pow2(Transform1.size),1)}}
   shutter 1
   shuttercustomoffset {{1/divisions/2}}
   name TimeBlur1
   xpos 180
   ypos 518
   disable {{parent.edge_blend_size<1}}
  }
set Nb217eb0 [stack 0]
push $Nb20c2a0
  Dot {
   name Dot1
   xpos -6
   ypos 426
  }
  Difference {
   inputs 2
   name Difference1
   xpos -40
   ypos 512
  }
  Expression {
   channel0 {none none none rgba.alpha}
   expr0 a>1e-10
   channel1 none
   channel2 none
   channel3 none
   name Expression1
   xpos -40
   ypos 566
  }
  Blur {
   channels alpha
   size {{parent.parent.edge_blend_size}}
   name Blur2
   xpos -40
   ypos 608
  }
  Grade {
   channels alpha
   blackpoint 0.5
   white_clamp true
   name Grade2
   xpos -40
   ypos 656
  }
  Dot {
   name Dot2
   xpos -6
   ypos 738
  }
push $Nb217eb0
  Grade {
   inputs 1+1
   white 1.4
   black_clamp false
   name Grade1
   xpos 180
   ypos 734
   disable {{parent.edge_blend_size<1}}
  }
  Merge2 {
   inputs 2
   Achannels rgb
   Bchannels rgb
   output rgb
   name Merge1
   xpos 180
   ypos 830
   disable {{!parent.overlay_pattern}}
  }
  Assert {
   expression {{"Expression3.maxx>Expression3.minx && Expression3.maxy>Expression3.miny"}}
   message "increase sample box size or decrease cell size"
   name error
   xpos 180
   ypos 926
  }
  Output {
   name Output1
   xpos 180
   ypos 1022
  }
 end_group
 Multiply {
  inputs 1+1
  channels rgb
  value 1.8
  maskChannelMask {{{parent.Merge9.maskChannelMask}}}
  invert_mask {{!Merge9.invert_mask}}
  name Multiply7
  xpos 70
  ypos 2123
  disable {{"!maskChannelMask || !\[exists parent.input3.name]"}}
 }
 Dot {
  name Dot23
  xpos 104
  ypos 2199
 }
push $N9783b50
push $N98bc680
 Multiply {
  inputs 1+1
  channels rgb
  value 1.8
  maskChannelMask {{{parent.Merge9.maskChannelMask}}}
  invert_mask {{parent.Merge9.invert_mask}}
  name Multiply2
  xpos 290
  ypos 2123
  disable {{"!maskChannelMask || (!parent.scatter && !parent.external_grain)"}}
 }
 Merge2 {
  inputs 2+1
  operation copy
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge9
  xpos 290
  ypos 2195
  disable {{"!(parent.scatter || parent.external_grain)"}}
 }
 Dot {
  name Dot11
  xpos 324
  ypos 2298
 }
set Nb2bca70 [stack 0]
push $N97675b0
 Dot {
  name Dot40
  xpos 874
  ypos 258
 }
push $N984cc70
 Dot {
  name Dot34
  xpos 624
  ypos 378
 }
 Multiply {
  inputs 1+1
  channels rgb
  value 0
  maskChannelMask none
  name Multiply1
  xpos 840
  ypos 374
 }
 Input {
  inputs 0
  name COMP
  label "\[value number]"
  note_font_size 30
  xpos 950
  ypos -680
 }
 Dot {
  name Dot44
  xpos 984
  ypos -198
 }
set Nb2db3d0 [stack 0]
 Merge2 {
  inputs 2
  operation from
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge8
  xpos 950
  ypos 374
  disable {{"Multiply6.value.r==0 || parent.fix_ghosting == 1"}}
 }
 Dot {
  name Dot18
  xpos 984
  ypos 2466
 }
set Nb2f08e0 [stack 0]
clone $C9867630 {
  xpos 730
  ypos 2462
  selected false
 }
 Multiply {
  channels rgb
  value {{1/Expression.temp_expr0}}
  name Multiply5
  xpos 400
  ypos 2462
 }
 Merge2 {
  inputs 2
  operation multiply
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge1
  xpos 290
  ypos 2462
 }
 Dot {
  name Dot8
  xpos 324
  ypos 2658
 }
push $Nb2f08e0
 Merge2 {
  inputs 2
  operation plus
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge3
  xpos 950
  ypos 2654
 }
set Nb325aa0 [stack 0]
 Dot {
  name Dot19
  xpos 984
  ypos 2802
 }
set Nb3360e0 [stack 0]
 Dot {
  name Dot41
  xpos 1204
  ypos 2802
 }
set Nb33aa70 [stack 0]
 Dot {
  name Dot36
  xpos 1314
  ypos 2802
 }
 Blur {
  channels rgb
  size 1
  name Blur1
  xpos 1280
  ypos 2894
 }
push $Nb33aa70
 Merge2 {
  inputs 2
  operation difference
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge10
  xpos 1170
  ypos 2894
 }
 Multiply {
  channels rgb
  value 50
  name Multiply3
  xpos 1170
  ypos 2942
 }
 Dot {
  name Dot43
  xpos 1204
  ypos 3042
 }
push $Nb2db3d0
 Dot {
  name Dot45
  xpos 1424
  ypos -198
 }
push $Nb325aa0
 Merge2 {
  inputs 2
  operation from
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge11
  xpos 1390
  ypos 2654
 }
 Dot {
  name Dot46
  xpos 1424
  ypos 3162
 }
push $Nb2bca70
 Dot {
  name Dot14
  xpos 104
  ypos 2298
 }
 Dot {
  name Dot12
  xpos 104
  ypos 3042
 }
push $N979b4d0
 Dot {
  name Dot47
  xpos -556
  ypos -390
 }
push $N97d0540
 Merge2 {
  inputs 2
  operation from
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge12
  xpos -590
  ypos -202
 }
 Dot {
  name Dot10
  xpos -556
  ypos 3162
 }
push $Nb3360e0
 Switch {
  inputs 5
  which {{output}}
  name Output
  xpos 950
  ypos 3296
  addUserKnob {20 User}
  addUserKnob {4 output M {"regrained comp" "original grain" "normalised grain" "adapted grain" "grain QC"}}
 }
 Output {
  name Output1
  xpos 950
  ypos 3494
 }
push $N9861e60
 Colorspace {
  colorspace_out AlexaV3LogC
  name Colorspace5
  xpos 70
  ypos 518
 }
 Clamp {
  maximum_enable false
  name Clamp2
  xpos -40
  ypos 512
 }
 Dot {
  name Dot1
  xpos -116
  ypos 522
 }
set Nb3e41d0 [stack 0]
 Dot {
  name Dot16
  xpos -336
  ypos 522
 }
 TimeWarp {
  lookup 1112
  time ""
  filter nearest
  name TimeWarp1
  xpos -370
  ypos 686
  disable true
 }
 CurveTool {
  operation "Max Luma Pixel"
  ROI {0 0 {width} {height}}
  autocropdata {512 389 1536 1167}
  maxlumapixdata {{curve} {curve}}
  maxlumapixvalue {{curve} {curve} 0.7628917694}
  minlumapixdata {{curve} {curve}}
  minlumapixvalue {{curve} {curve} 0.09779488295}
  name CurveTool_Range
  xpos -370
  ypos 734
 }
push $N976c150
 Invert {
  name Invert2
  xpos 180
  ypos 1064
  disable {{!parent.invert_1}}
 }
push $N98a2c50
 Dot {
  name Dot5
  xpos 104
  ypos 786
 }
 Reformat {
  inputs 0
  type "to box"
  box_width {{Dot1.width}}
  box_height {{Dot1.height}}
  box_fixed true
  box_pixel_aspect {{Dot1.pixel_aspect}}
  name Reformat1
  xpos -40
  ypos 686
 }
 Dot {
  name Dot42
  xpos -6
  ypos 786
 }
set Nb42a1a0 [stack 0]
 Copy {
  inputs 2
  from0 {{{parent.Copy2.from0}}}
  to0 rgba.red
  name Copy3
  xpos 70
  ypos 848
 }
 Expression {
  expr0 abs(r)
  channel1 {none none none rgba.alpha}
  expr1 r==0
  channel2 none
  channel3 none
  name Expression4
  xpos 70
  ypos 926
 }
set Nb43ce00 [stack 0]
push $Nb3e41d0
push $Nb42a1a0
 Copy {
  inputs 2
  from0 rgba.blue
  to0 rgba.red
  name Copy2
  xpos -150
  ypos 848
 }
 Expression {
  temp_name0 min
  temp_expr0 0.761129737645
  temp_name1 max
  temp_expr1 0.796539306641
  channel0 {none none none rgba.alpha}
  expr0 "r>=min && r<=max"
  channel1 none
  channel2 none
  channel3 none
  name Expression2
  xpos -150
  ypos 926
 }
 Dot {
  name Dot4
  xpos -116
  ypos 1002
 }
 ChannelMerge {
  inputs 2
  operation stencil
  name ChannelMerge2
  xpos -40
  ypos 985
 }
push $Nb43ce00
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy1
  xpos 70
  ypos 992
 }
 ChannelMerge {
  inputs 2
  A -rgba.green
  operation multiply
  name ChannelMerge1
  xpos 70
  ypos 1057
  disable {{!A}}
 }
 Premult {
  channels {rgba.red -rgba.green -rgba.blue none}
  name Premult1
  xpos 70
  ypos 1142
 }
 TimeWarp {
  lookup {{parent.TimeWarp1.lookup}}
  time ""
  filter nearest
  name TimeWarp2
  xpos 70
  ypos 1190
  disable true
 }
 FrameBlend {
  channels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  numframes 10
  name FrameBlend1
  xpos 70
  ypos 1232
  disable true
 }
 CurveTool {
  avgframes 0
  channels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  ROI {0 0 {width} {height}}
  autocropdata {512 389 1536 1167}
  intensitydata {{curve} {curve} 0 0.001014364476}
  name CurveTool
  xpos 70
  ypos 1280
 }
end_group
Group {
 inputs 2
 name Gustave_Write_Final1
 onCreate "# Variables to setup for the onCreate Callback\n# choice_list: lists write available Write Node connected to the Switch in the dropdown Menu\nthis_node = nuke.thisNode()\ngui = int(this_node\['gui'].getValue())\nprint('\[\{0\}] \{1\}'.format(this_node.name(), 'onCreate'))\n\ndef on_create_node_recipe():    \n    if not gui:\n        print('NON GUI SESSION')\n        return\n\n    path_builder = this_node\['path_builder'].getValue()\n\n    this_node\['file'].setValue(path_builder)\n    # Open the Autowrite Group and get the Switch Node\n    with this_node:\n        settings = nuke.toNode('Output_Config_Selection')\n\n    # Get all Inputs from the Switch\n    inputs = settings.inputs()\n\n    # For every node add an option in the setting menu\n    choice_list = list()\n\n    for input_int in range(0, inputs):\n        choice_list.append(settings.input(input_int).name())\n\n    this_node\['settings'].setValues(choice_list)\n    \ndef execute():\n    if not gui:\n        print('NO GUI SESSION')\n        return\n    nukescripts.utils.executeDeferred(on_create_node_recipe)\n\nexecute()"
 knobChanged "knob = nuke.thisKnob()\nthis_node = nuke.thisNode()\ngui = int(this_node\['gui'].getValue())\n\ndef knob_changed_recipe():\n    if not gui:\n        print('NON GUI SESSION')\n        return\n    # Crop knob: Drives the switch inside of the Write Node (Preserve BBox)\n    if knob.name() == 'crop':\n\n        # It output a float to we need to convert it to Int to be able to used if conditions properly.\n        if int(knob.getValue()):\n            this_node.knobs()\['format'].setVisible(True)\n        else:\n            this_node.knobs()\['format'].setVisible(False)\n\n    # If the Knob Name settings is changed. We have to update the path and relink all the knobs and rebuild the advanced settings.\n    if knob.name() == 'settings':\n        latest_settings = list()\n\n        path_builder = this_node\['path_builder'].getValue()\n        this_node\['file'].setValue(path_builder)\n        try:\n            switch_node = update_autowrite_ui(knob.getValue())\n        except Exception:\n            print('Trying to load Write Settings...')\n\n        which = switch_node\['which'].getValue()\n        selected = switch_node.input(int(which)).name()\n        inputs = switch_node.inputs()\n\n        for input_int in range(0, inputs):\n            if switch_node.input(input_int).name() == selected:\n                switch_node.input(input_int)\['disable'].setValue(False)\n                continue\n            switch_node.input(input_int)\['disable'].setValue(True)\n\n\ndef update_autowrite_ui(setting):\n    default_knobs = get_default_knobs()\n    with this_node:\n        switch_node = nuke.toNode('Output_Config_Selection')\n        default_write = nuke.toNode('default_writenode')\n        selection = int(setting)\n        new_node = nuke.toNode(switch_node.input(int(setting)).name())\n        delete_advanced_settings()\n        print('New Write Setting: \{\}'.format(new_node.name()))\n        add_default_knobs(default_knobs, new_node)\n        add_advanced_settings(default_write, new_node)\n        selection_knob = switch_node\['which']\n    selection_knob.setValue(selection)\n    switch_node.setSelected(True)\n    this_node.knob('main_tab').setFlag(0)\n    return switch_node\n\n\ndef delete_advanced_settings():\n    advanced_knob_dict = dict()\n    knobs = this_node.allKnobs()\n    for index, knob in enumerate(knobs):\n        if knob.name() == 'ADVANCED_SETTINGS_START':\n            begin = index\n\n    advanced_knobs = \[advanced_knob_dict.update(\{x.name(): x\}) for x in knobs\[begin + 1:index + 1]]\n    for knob_name, knob_obj in advanced_knob_dict.items():\n        this_node.removeKnob(knob_obj)\n\n\ndef get_default_knobs():\n    # Open group and return default knobs\n    default_knob_dict = dict()\n    with this_node:\n        knobs = nuke.toNode('default_knobs').allKnobs()\n        for index, knob in enumerate(knobs):\n            if knob.name() == 'DEFAULT_KNOBS_START':\n                begin = index\n    default_knobs = \[default_knob_dict.update(\{x.name(): x\}) for x in knobs\[begin + 1:index]]\n    return default_knob_dict\n    # return default_knobs\n\n\ndef add_default_knobs(default_knobs, new_node):\n    # Add new default knobs\n    for knob_name, knob_obj in default_knobs.items():\n        new_knob = this_node.knobs().get(knob_name)\n        if not new_knob:\n            print('Knob \{\} does not exist. Creating Link_Knob.'.format(knob_name))\n            missing_knob = nuke.Link_Knob(knob_name)\n            this_node.addKnob(missing_knob)\n            new_knob = this_node.knobs().get(knob_name)\n\n        new_link = '\{0\}.\{1\}'.format(new_node.name(), knob_name)\n        new_knob.setLink(new_link)\n        this_node\[knob_name].setValue(this_node\[knob_name].value())\n\n\ndef add_advanced_settings(default_node, new_node):\n    print('Registering advanced settings...')\n    default_knob_names = \[]\n    additional_knob_names = \[]\n\n    for knob in default_node.allKnobs():\n        default_knob_names.append(knob.name())\n\n    for knob in new_node.allKnobs():\n        additional_knob_names.append(knob.name())\n\n    additional_knobs = list(set(additional_knob_names) - set(default_knob_names))\n\n    for knob in additional_knobs:\n        new_knob = new_node.knobs().get(knob)\n        this_node.addKnob(new_knob)\n        new_knob.setFlag(nuke.STARTLINE)\n        print('Added Knob \{0\} - \{1\}\"'.format(new_knob.name(), new_knob))\n\n    return additional_knobs\n\nknob_changed_recipe()"
 tile_color 0xffd526ff
 label "--\n\[regsub \{^(.*\[\\/])\} \[value file] \"\"]\nWrite Setting: \[value settings]"
 note_font "DejaVu Sans"
 note_font_color 0xff
 selected true
 xpos 670
 ypos -508
 addUserKnob {20 main_tab l Gustave_Write}
 addUserKnob {26 title l " " T "<p><code><span style=\"font-size: xx-large;\"><span style=\"color: #ffb867;\">\[G</span><span style=\"color: #ffc173;\">U</span><span style=\"color: #ffc97e;\">S</span><span style=\"color: #ffd28a;\">T</span><span style=\"color: #ffd694;\">A</span><span style=\"color: #ffda9e;\">V</span><span style=\"color: #ffdda7;\">E&nbsp;<span style=\"color: #fff6e8;\"><span style=\"font-size: xx-large;\">W</span></span><span style=\"color: #fff9ec;\"><span style=\"font-size: xx-large;\">R</span></span><span style=\"color: #fff5e2;\"><span style=\"font-size: xx-large;\">I</span></span><span style=\"color: #fff2d8;\"><span style=\"font-size: xx-large;\">T</span></span><span style=\"color: #ffeece;\"><span style=\"font-size: xx-large;\">E FINAL]</span></span></span></span></code></p>"}
 addUserKnob {26 node_information l " " T "<br>\n<span style=\"color: #fff6e8;\"> This Write Node is for Final Renders.<br> If this is the render that you want to publish, then this is the node you should be using.<br> Please note, the naming is based off your scene name and version number.\n</span>\n</br>"}
 addUserKnob {26 output_settings l "Output Settings"}
 addUserKnob {4 settings l " " M {EXRs EXRs_Compressed PNGs JPEGs}}
 addUserKnob {6 crop l Crop +STARTLINE}
 crop true
 addUserKnob {41 format l "" -STARTLINE T All_Available_Formats.format}
 addUserKnob {26 empty_space l "" +STARTLINE T " "}
 addUserKnob {26 divider_line l " "}
 addUserKnob {41 file_type l INVISIBLE +INVISIBLE T EXRs.file_type}
 addUserKnob {41 channels T EXRs.channels}
 addUserKnob {41 file T EXRs.file}
 addUserKnob {26 empty_space_02 l "" +STARTLINE T " "}
 addUserKnob {26 actions l Actions}
 addUserKnob {41 Render l "Render Locally" T EXRs.Render}
 addUserKnob {1 node_type +INVISIBLE}
 node_type gustave_write_final
 addUserKnob {6 reevaluate_file +INVISIBLE +STARTLINE}
 reevaluate_file {{"\[python -execlocal nuke.thisNode()\\\['file'\\].setValue(nuke.thisNode()\\\['path_builder'\\].getValue())\\nret\\ =\\ 1]"}}
 addUserKnob {6 gui l gui? +INVISIBLE +STARTLINE}
 gui {{"\$gui"}}
 addUserKnob {1 path_builder l INVISIBLE +INVISIBLE}
 path_builder "\[value root.g_render]/\[value root.g_entity_name]_\[value root.g_step_short_name]_\[value root.g_name]_v\[value root.g_version]/\[value root.g_entity_name]_\[value root.g_step_short_name]_\[value root.g_name]_v\[value root.g_version].%04d.\[value file_type]"
 addUserKnob {22 gustave_icon_set +INVISIBLE T "import framework_folks\n\nnode = nuke.thisNode()\ntitle_template = node\['title_template'].value()\ngustave_icon = '<img src=\"\{\}\">'.format(framework_folks.utils.icons.retrieve_all_gustave_icons().get('low'))\ntitle = re.sub('\\GUSTAVE_ICON', gustave_icon, title_template)\nnode\['title_template'].setValue(title)\n\nprint('Set Gustave_Write title info and logo.')" +STARTLINE}
 addUserKnob {1 g_type +INVISIBLE}
 g_type Gustave_Write
 addUserKnob {6 color_rgba_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
 addUserKnob {20 callbacks l "Python Callbacks"}
 addUserKnob {26 writenode_callbacks l "" +STARTLINE T "Write Node Callbacks"}
 addUserKnob {26 ""}
 addUserKnob {41 beforeFrameRender l "before render" T EXRs.beforeFrameRender}
 addUserKnob {41 beforeRender l "before each frame" T EXRs.beforeRender}
 addUserKnob {41 afterRender l "after each frame" T EXRs.afterRender}
 addUserKnob {41 renderProgress l "after render" T EXRs.renderProgress}
 addUserKnob {41 afterFrameRender l "render progress" T EXRs.afterFrameRender}
 addUserKnob {20 advanced_settings l "Advanced Settings"}
 addUserKnob {26 advanced_settings_info l "" +STARTLINE T "Advanced Settings for selected Output Configuration"}
 addUserKnob {26 ""}
 addUserKnob {26 ADVANCED_SETTINGS_START l "" +STARTLINE T ""}
 addUserKnob {11 first_part l "first part" t "Enabled when the 'channels' interleave strategy is selected and the channels knob is set to 'all' <br>i.e. the output is a multi-part exr with one part per layer.<br><br>Specifies the layer that will be assigned to the first part of the multi-part .exr. All remaining parts will be stored in alphanumeric order.<br>In a multi-view setup, the layer for each view will be assigned to the topmost parts<br>i.e. part0: rgba.left, part1: rgba.right<br><br>The 'none' acts as the default behaviour where all parts will be stored in alphanumeric order." +DISABLED}
 first_part rgba
 addUserKnob {0 stereo +INVISIBLE}
 addUserKnob {4 right_view l "Right view" t "If stereo is on, this is the view that is written as the \"right\" image" +DISABLED +HIDDEN M {"\7" main}}
 addUserKnob {6 autocrop t "Reduce the bounding box to the non-zero area. This is normally not needed as the zeros will compress very small, and it is slow as the whole image must be calculated before any can be written. However this may speed up some programs reading the files." +STARTLINE}
 addUserKnob {4 left_view l "Left view" t "If stereo is on, this is the view that is written as the \"left\" image" +DISABLED +HIDDEN M {"\7" main}}
 addUserKnob {6 noprefix l "do not attach prefix" t "By default unknown metadata keys have the prefix 'nuke' attached to them before writing them into the file.  Enable this option to write the metadata 'as is' without the nuke prefix." +STARTLINE}
 addUserKnob {6 write_hash l "write hash" t "Write the hash of the node graph into the exr file.  Useful to see if your image is up to date when doing a precomp." +INVISIBLE +STARTLINE}
 addUserKnob {6 "standard layer name format" t "Older versions of Nuke write out channel names in the format: view.layer.channel. Check this option to follow the EXR standard format: layer.view.channel" +STARTLINE}
 addUserKnob {4 interleave t "Interleave strategy of channels, layers and views within the rendered .exr. A single or multi-part exr will be created as per the options below, with layers and parts sorted alphanumerically.<br><br><u>channels, layers and views</u><br>Creates a single-part .exr and ensures backwards compatibility with applications using OpenEXR 1.x.<br><br><u>channels and layers</u><br>Creates a multi-part .exr with one part per view. This can speed up Read performance as Nuke will only read the part pertaining to the specified view.<br><br><u>channels</u><br>Creates a multi-part exr with one part per layer." M {"channels, layers and views" "channels and layers" channels}}
 addUserKnob {4 datatype M {"16 bit half" "32 bit float"}}
 addUserKnob {4 heroview t "If stereo is on, this is the view that is written as the \"main\" image" M {"\7" main}}
 addUserKnob {4 compression M {none "Zip (1 scanline)" "Zip (16 scanlines)" "PIZ Wavelet (32 scanlines)" RLE B44 B44A DWAA DWAB}}
 addUserKnob {8 dw_compression_level l "compression level" +DISABLED +HIDDEN R 0 500}
 addUserKnob {6 truncateChannelNames l "truncate channel names" t "Truncate channel names to a maximum of 31 characters for backwards compatibility" +STARTLINE}
 addUserKnob {6 write_ACES_compliant_EXR l "write ACES compliant EXR" t "Write out an ACES compliant EXR file" +STARTLINE}
 addUserKnob {6 write_full_layer_names l "write full layer names" t "Older versions of Nuke just stored the layer name in the part name of multi-part files. Check this option to always write the layer name in the channel names following the EXR standard." +DISABLED +STARTLINE}
 addUserKnob {4 metadata t "Which metadata to write out to the EXR file.<p>'no metadata' means that no custom attributes will be created and only metadata that fills required header fields will be written.<p>'default metadata' means that the optional timecode, edgecode, frame rate and exposure header fields will also be filled using metadata values." M {"no metadata" "default metadata" "default metadata and exr/*" "all metadata except input/*" "all metadata"}}
 metadata "all metadata"
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x441d1dff
  label "This is the Gustave Autowrite Setup. <b>Pretty</b>, isn't it?"
  note_font_size 42
  xpos -1089
  ypos -386
  bdwidth 1889
  bdheight 1703
  z_order -1
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0xffe6d3ff
  label Output_Config_Selection
  note_font_size 24
  xpos -235
  ypos 887
  bdwidth 570
  bdheight 227
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0xffe6d3ff
  label "These are not really needed but I thought they were a great way to see what the default settings were for a specific Write Node. Also very easy to move around so if a node has complicated settings and we wish to modify\nthe settings promptly. All we have to do is copy one of those NoOps above said Write Node and the callback in the NoOp will set the values from itself to the Write Node automatically."
  note_font_size 12
  xpos -501
  ypos 530
  bdwidth 1285
  bdheight 121
 }
 BackdropNode {
  inputs 0
  name BackdropNode4
  tile_color 0xffe6d3ff
  label "If no TimeCode metadata is found, add default TC."
  note_font_size 17
  xpos -951
  ypos -209
  bdwidth 419
  bdheight 137
 }
 BackdropNode {
  inputs 0
  name default_knobs
  knobChanged "nuke.thisNode()\['label'].evaluate()"
  label "<font color=#9f0000>\[python -exec \{\nknobs = nuke.thisNode().allKnobs()\nfor index, knob in enumerate(knobs):\n    if knob.name() == 'DEFAULT_KNOBS_START':\n        begin = index\n\ndefault_knob_dict = dict()\n\[default_knob_dict.update(\{x.name(): x.value()\}) for x in knobs\[begin+1:index]]\n\n\}]\[python default_knob_dict]"
  note_font "Bitstream Vera Sans"
  xpos 214
  ypos -169
  bdwidth 293
  bdheight 167
  addUserKnob {20 User}
  addUserKnob {26 DEFAULT_KNOBS_START l INVISIBLE +INVISIBLE}
  addUserKnob {6 channels -STARTLINE}
  channels true
  addUserKnob {6 file -STARTLINE}
  file true
  addUserKnob {6 Render -STARTLINE}
  Render true
  addUserKnob {6 file_type +STARTLINE}
  file_type true
  addUserKnob {6 beforeRender +STARTLINE}
  beforeRender true
  addUserKnob {6 beforeFrameRender +STARTLINE}
  beforeFrameRender true
  addUserKnob {6 afterFrameRender +STARTLINE}
  afterFrameRender true
  addUserKnob {6 afterRender +STARTLINE}
  afterRender true
  addUserKnob {6 renderProgress +STARTLINE}
  renderProgress true
  addUserKnob {26 DEFAULT_KNOBS_END l INVISIBLE +INVISIBLE}
 }
 Input {
  inputs 0
  name Plate_Metadata
  xpos -780
  ypos -264
  number 1
  addUserKnob {20 User}
  addUserKnob {6 tc l "" +STARTLINE +STARTLINE}
 }
set Nb502dc0 [stack 0]
push $Nb502dc0
 Dot {
  name Dot10
  xpos -885
  ypos -261
 }
 ModifyMetaData {
  metadata {
   {set input/frame_rate "\[value root.fps]"}
  }
  name ModifyMetaData1
  xpos -919
  ypos -153
 }
 AddTimeCode {
  name AddTimeCode1
  xpos -919
  ypos -129
 }
 Dot {
  name Dot11
  xpos -885
  ypos -102
 }
 Switch {
  inputs 2
  which {{"\[python -execlocal node\\ =\\ nuke.toNode('Plate_Metadata')\\n\\nif\\ node.metadata():\\n\\ \\ \\ \\ if\\ node.metadata().get('input/timecode'):\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 1\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  name Switch1
  label "\[value which]"
  selected true
  xpos -780
  ypos -111
 }
 Dot {
  name Dot1
  xpos -746
  ypos -46
 }
 Input {
  inputs 0
  name Input
  xpos -484
  ypos -275
 }
 CopyMetaData {
  inputs 2
  mergeMode "Meta only"
  name insert_timecode
  xpos -484
  ypos -49
 }
 Dot {
  name Dot7
  xpos -450
  ypos 60
 }
set Nb541930 [stack 0]
 Dot {
  name Dot9
  xpos -307
  ypos 60
 }
 Crop {
  box {0 0 {All_Available_Formats.width} {All_Available_Formats.height}}
  name Final_Write_Crop
  xpos -341
  ypos 164
 }
push $Nb541930
 Dot {
  name Dot8
  xpos -594
  ypos 60
 }
 Dot {
  name Dot2
  xpos -594
  ypos 167
 }
 Switch {
  inputs 2
  which {{parent.crop}}
  name Preserve_Bounding_Box
  tile_color 0xffe6d3ff
  label "\[value which]\nThe expression gets whether the Crop Checkbox is checked or not.\n"
  xpos -490
  ypos 152
 }
 Dot {
  name Dot6
  xpos -456
  ypos 344
 }
set Nb567140 [stack 0]
 Dot {
  name Dot4
  xpos -61
  ypos 344
 }
set Nb56bce0 [stack 0]
 Dot {
  name Dot5
  xpos 340
  ypos 344
 }
set Nb570860 [stack 0]
 Dot {
  name Dot3
  xpos 729
  ypos 344
 }
 NoOp {
  name default_info4
  knobChanged "this_node = nuke.thisNode()\nwrite_node = this_node.dependent()\[0]\nseperator_in = this_node.knob('seperator_in')\nadd_knob = False\n\nfor num, knob in enumerate(this_node.allKnobs()):\n    if knob.name() == 'seperator_out':\n        add_knob = False\n    \n    if add_knob:\n        if knob.name() in write_node.knobs():     \n            value = nuke.toNode(this_node.name())\[knob.name()].getValue()             \n            write_node\[knob.name()].setValue(value)\n        \n    if knob.name() == 'seperator_in':\n        add_knob = True"
  xpos 694
  ypos 623
  addUserKnob {20 variables l Variables}
  addUserKnob {26 seperator_in l "" +STARTLINE}
  addUserKnob {1 file_type}
  file_type jpeg
  addUserKnob {26 seperator_out l "" +STARTLINE}
  addUserKnob {26 info l "" +STARTLINE T "Put your default info for the knobs in the below node here in between the two seperators"}
 }
 Write {
  channels rgba
  file /Volumes/Projects/dev/VFX/dev_001/dev_001_010/Publish/Renders/Comp/Frames/dev_001_010_comp_writenodes_v025/dev_001_010_comp_writenodes_v025.%04d.jpeg
  file_type jpeg
  create_directories true
  checkHashOnRead false
  version 1
  in_colorspace linear
  out_colorspace linear
  name JPEGs
  xpos 694
  ypos 791
  disable true
 }
push $Nb570860
 NoOp {
  name default_info3
  knobChanged "this_node = nuke.thisNode()\nwrite_node = this_node.dependent()\[0]\nseperator_in = this_node.knob('seperator_in')\nadd_knob = False\n\nfor num, knob in enumerate(this_node.allKnobs()):\n    if knob.name() == 'seperator_out':\n        add_knob = False\n    \n    if add_knob:\n        if knob.name() in write_node.knobs():     \n            value = nuke.toNode(this_node.name())\[knob.name()].getValue()             \n            write_node\[knob.name()].setValue(value)\n        \n    if knob.name() == 'seperator_in':\n        add_knob = True"
  xpos 306
  ypos 622
  addUserKnob {20 variables l Variables}
  addUserKnob {26 seperator_in l "" +STARTLINE}
  addUserKnob {1 file_type}
  file_type png
  addUserKnob {26 seperator_out l "" +STARTLINE}
  addUserKnob {26 info l "" +STARTLINE T "Put your default info for the knobs in the below node here in between the two seperators"}
 }
 Write {
  channels rgba
  file /Volumes/Projects/dev/VFX/dev_001/dev_001_010/Publish/Renders/Comp/Frames/dev_001_010_comp_writenodes_v025/dev_001_010_comp_writenodes_v025.%04d.png
  file_type png
  create_directories true
  checkHashOnRead false
  in_colorspace linear
  out_colorspace linear
  name PNGs
  xpos 306
  ypos 795
  disable true
 }
push $Nb567140
 ModifyMetaData {
  metadata {
   {set exr/compressionName "\[value EXRs_Compressed.compression]"}
  }
  name ModifyMetaData2
  label "\[value EXRs_Compressed.compression]"
  xpos -490
  ypos 415
 }
 NoOp {
  name default_info1
  knobChanged "this_node = nuke.thisNode()\nwrite_node = this_node.dependent()\[0]\nseperator_in = this_node.knob('seperator_in')\nadd_knob = False\n\nfor num, knob in enumerate(this_node.allKnobs()):\n    if knob.name() == 'seperator_out':\n        add_knob = False\n    \n    if add_knob:\n        if knob.name() in write_node.knobs():     \n            value = nuke.toNode(this_node.name())\[knob.name()].getValue()             \n            write_node\[knob.name()].setValue(value)\n        \n    if knob.name() == 'seperator_in':\n        add_knob = True"
  xpos -491
  ypos 617
  addUserKnob {20 variables l Variables}
  addUserKnob {26 seperator_in l "" +STARTLINE}
  addUserKnob {1 file_type}
  file_type exr
  addUserKnob {1 compression}
  compression DWAA
  addUserKnob {7 dw_compression_level R 0 500}
  dw_compression_level 150
  addUserKnob {26 seperator_out l "" +STARTLINE}
  addUserKnob {26 info l "" +STARTLINE T "Put your default info for the knobs in the below node here in between the two seperators"}
 }
 Write {
  channels rgba
  file /Volumes/Projects/dev/VFX/dev_001/dev_001_010/Publish/Renders/Comp/Frames/dev_001_010_comp_writenodes_v028/dev_001_010_comp_writenodes_v028.%04d.exr
  file_type exr
  compression DWAA
  dw_compression_level 150
  metadata "all metadata"
  first_part rgba
  create_directories true
  last 5
  version 2
  in_colorspace linear
  out_colorspace linear
  name EXRs_Compressed
  xpos -491
  ypos 794
  disable true
 }
push $Nb56bce0
 NoOp {
  name default_info
  knobChanged "this_node = nuke.thisNode()\nwrite_node = this_node.dependent()\[0]\nseperator_in = this_node.knob('seperator_in')\nadd_knob = False\n\nfor num, knob in enumerate(this_node.allKnobs()):\n    if knob.name() == 'seperator_out':\n        add_knob = False\n    \n    if add_knob:\n        if knob.name() in write_node.knobs():     \n            value = nuke.toNode(this_node.name())\[knob.name()].getValue()             \n            write_node\[knob.name()].setValue(value)\n        \n    if knob.name() == 'seperator_in':\n        add_knob = True"
  xpos -95
  ypos 608
  addUserKnob {20 variables l Variables}
  addUserKnob {26 seperator_in l "" +STARTLINE}
  addUserKnob {1 file_type}
  file_type exr
  addUserKnob {26 seperator_out l "" +STARTLINE}
  addUserKnob {26 info l "" +STARTLINE T "Put your default info for the knobs in the below node here in between the two seperators"}
 }
 Write {
  channels rgba
  file /Volumes/Projects/Freebirds/FB300/VFX/FB301/FB301_012/FB301_012_004/Publish/Renders/Comp/Frames/FB301_012_004_comp_main_v001/FB301_012_004_comp_main_v001.%04d.exr
  file_type exr
  metadata "all metadata"
  first_part rgba
  create_directories true
  version 14
  name EXRs
  xpos -95
  ypos 793
 }
 Switch {
  inputs 4
  name Output_Config_Selection
  knobChanged "print('Switch Node \"knobChanged\" callback initialized...')\nthis_node = nuke.thisNode()\n\n# What is the current selected node in the Switch\nwhich = this_node\['which'].getValue()\nselected = this_node.input(int(which)).name()\n\n# How many inputs the Switch has connected\ninputs = this_node.inputs()\n\n# Get all the \"WriteNodes\" connected to this Switch and build a list comprehension.\n# Then add them to the Settings selection menu in the Gustave_Write node\nwrite_nodes = \[x.name() for x in this_node.dependencies()]\nnuke.thisParent()\['settings'].setValues(write_nodes)\n\n# A snippet to only enable the selected Write Node. This allows the artist to select the\n# group node and only \n\nfor input_int in range(0, inputs):\n    if this_node.input(input_int).name() == selected:\n        this_node.input(input_int)\['disable'].setValue(False)\n        continue\n    this_node.input(input_int)\['disable'].setValue(True)\n    "
  label "\[value which]\n\nThis node has callbacks. Summed up here:\n\nknobChanged:\nEnables only the Selected Write Node.\nRuns thru all the Write Nodes and add them as a selection in the Output Settings  Enumeration Knob of this Group.\n\n"
  selected true
  xpos 14
  ypos 994
  addUserKnob {20 User}
 }
 Output {
  name Frames_Output
  xpos 14
  ypos 1288
 }
 Reformat {
  inputs 0
  name All_Available_Formats
  xpos -202
  ypos 165
 }
 StickyNote {
  inputs 0
  name StickyNote1
  tile_color 0xffe6d3ff
  label "The Write Node parses the default_knobs to add them if they are missing.\nCreates them as Link_Knob so they can be linked to the Write Nodes inside the group."
  xpos 138
  ypos -213
 }
 Write {
  inputs 0
  channels rgba
  checkHashOnRead false
  in_colorspace linear
  out_colorspace linear
  name default_writenode
  xpos 313
  ypos -52
  disable true
 }
end_group
push $N9294390
Dot {
 name Dot2
 tile_color 0xe955ffff
 selected true
 xpos 862
 ypos 162
}
Group {
 inputs 4
 name COMP_CHECKER
 onCreate "node = nuke.thisNode()\nimport os\ndef get_conform():\n    root = nuke.root().name()\n    proj = root.split(os.sep)\[3]\n    ep = root.split(os.sep)\[4]\n    if ep != 'VFX':\n        proj = os.path.join(proj,ep)   \n    dir_head = '/Volumes/Projects'\n    dir_tail = 'Production/delivery_conform/Delivery_Conform.nk'    \n    path = os.path.join(dir_head,proj)\n    path = os.path.join(path,dir_tail)\n    return path\n\npath = get_conform()   \n\nif not os.path.exists(path):\n    path = ''\n    \nwith node:\n    con = nuke.toNode('Delivery_Conform')\n    con\['file'].setValue(path)"
 selected true
 xpos 670
 ypos 157
 addUserKnob {20 User l Controls}
 addUserKnob {4 choice l mode M {overview difference grain refQT "version difference" "peak check" "neg check" di_mattes ""}}
}
 Input {
  inputs 0
  name Inputcomp
  xpos -593
  ypos 280
  number 1
 }
 Dot {
  name Dot10
  xpos -559
  ypos 474
 }
set Nb84ed70 [stack 0]
 Dot {
  name Dot23
  xpos -559
  ypos 971
 }
push $Nb84ed70
 Remove {
  name Remove1
  xpos -538
  ypos 518
 }
 Group {
  name burn_in5
  xpos -538
  ypos 664
  addUserKnob {20 User l Text}
  addUserKnob {41 message T Text1.message}
  addUserKnob {7 font_scale l "font scale" R 0 2}
  font_scale 1
  addUserKnob {14 margin l margins R 0 100}
  margin {0.015 0.03}
  addUserKnob {41 color T Text1.color}
  addUserKnob {19 bg_color l "background color"}
  bg_color {0 0 0 1}
  addUserKnob {6 bg_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 enable_bg l "enable background" +STARTLINE}
  enable_bg true
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {26 spacer l " "}
  addUserKnob {41 xjustify l justify T Text1.xjustify}
  addUserKnob {41 yjustify l "" -STARTLINE T Text1.yjustify}
  addUserKnob {20 vars l variables n 1}
  addUserKnob {1 var01}
  addUserKnob {1 var02}
  addUserKnob {1 var03}
  addUserKnob {20 endGroup n -1}
 }
  Input {
   inputs 0
   name Input
   xpos -61
   ypos -84
  }
  Dot {
   name Dot1
   xpos -27
   ypos -16
  }
set Nb871b90 [stack 0]
  Dot {
   name Dot2
   xpos 127
   ypos -16
  }
  Reformat {
   type "to box"
   box_width {{width}}
   name Reformat1
   xpos 93
   ypos 2
  }
  Reformat {
   type scale
   scale {{1-parent.margin} {1-parent.margin}}
   resize none
   name Reformat3
   xpos 93
   ypos 37
  }
  Text2 {
   font_size_toolbar 104.75
   font_width_toolbar 100
   font_height_toolbar 100
   replace true
   message "DI mattes"
   old_message {{68 73 32 109 97 116 116 101 115}
     }
   box {0 0 {width} {height}}
   yjustify bottom
   transforms {{0 2}
     }
   font_size_values {{0 {curve x1025 104.75} 1 104.75 2 104.75 3 104.75 4 104.75 5 104.75 6 104.75 7 104.75 8 104.75 0 {curve x1025 104.75}}
     }
   cursor_position 9
   font {{ Arial : Regular : Arial.ttf : 0 }}
   global_font_scale {{(height/2000)*font_scale}}
   font_size 104.75
   center {960 540}
   cursor_initialised true
   autofit_bbox false
   initial_cursor_position {{0 2160}
     }
   group_animations {{0} imported: 0 selected: items: "root transform/"}
   animation_layers {{1 11 960 540 0 0 1 1 0 0 0 0}
     }
   name Text1
   xpos 93
   ypos 65
  }
set Nb8a0170 [stack 0]
  Shuffle {
   red white
   green white
   blue white
   alpha white
   name Shuffle1
   xpos 215
   ypos 65
  }
  Multiply {
   channels rgba
   value {{parent.bg_color} {parent.bg_color} {parent.bg_color} {parent.bg_color}}
   name Multiply1
   xpos 215
   ypos 93
  }
  BlackOutside {
   name BlackOutside1
   xpos 215
   ypos 129
  }
push $Nb8a0170
  Merge2 {
   inputs 2
   operation under
   name Merge2
   xpos 93
   ypos 129
   disable {{!parent.enable_bg}}
  }
  Reformat {
   type scale
   scale {{1/parent.Reformat3.scale.0} {1/parent.Reformat3.scale.1}}
   resize none
   name Reformat4
   xpos 93
   ypos 166
  }
  Reformat {
   type "to box"
   box_width {{width}}
   box_pixel_aspect {{Input.pixel_aspect}}
   name Reformat2
   xpos 93
   ypos 210
  }
push $Nb871b90
  Merge2 {
   inputs 2
   name Merge1
   xpos -61
   ypos 210
  }
  Output {
   name Output1
   xpos -61
   ypos 294
  }
 end_group
 Dot {
  name Dot1
  xpos -504
  ypos 743
 }
push $Nb84ed70
 Dot {
  name Dot12
  xpos -366
  ypos 474
 }
set Nb92f3b0 [stack 0]
 Expression {
  expr0 r<0
  expr1 g<0
  expr2 b<0
  name neg_check
  xpos -300
  ypos 536
  addUserKnob {20 User}
  addUserKnob {7 peak R 0 100}
  peak 55
 }
push $Nb92f3b0
 Grade {
  multiply 0.5
  name Grade2
  xpos -400
  ypos 540
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge4
  xpos -400
  ypos 596
 }
 Group {
  name burn_in4
  xpos -400
  ypos 666
  addUserKnob {20 User l Text}
  addUserKnob {41 message T Text1.message}
  addUserKnob {7 font_scale l "font scale" R 0 2}
  font_scale 1
  addUserKnob {14 margin l margins R 0 100}
  margin {0.015 0.03}
  addUserKnob {41 color T Text1.color}
  addUserKnob {19 bg_color l "background color"}
  bg_color {0 0 0 1}
  addUserKnob {6 bg_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 enable_bg l "enable background" +STARTLINE}
  enable_bg true
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {26 spacer l " "}
  addUserKnob {41 xjustify l justify T Text1.xjustify}
  addUserKnob {41 yjustify l "" -STARTLINE T Text1.yjustify}
  addUserKnob {20 vars l variables n 1}
  addUserKnob {1 var01}
  addUserKnob {1 var02}
  addUserKnob {1 var03}
  addUserKnob {20 endGroup n -1}
 }
  Input {
   inputs 0
   name Input
   xpos -61
   ypos -84
  }
  Dot {
   name Dot1
   xpos -27
   ypos -16
  }
set Nb9752a0 [stack 0]
  Dot {
   name Dot2
   xpos 127
   ypos -16
  }
  Reformat {
   type "to box"
   box_width {{width}}
   name Reformat1
   xpos 93
   ypos 2
  }
  Reformat {
   type scale
   scale {{1-parent.margin} {1-parent.margin}}
   resize none
   name Reformat3
   xpos 93
   ypos 37
  }
  Text2 {
   font_size_toolbar 104.75
   font_width_toolbar 100
   font_height_toolbar 100
   replace true
   message "Neg check"
   old_message {{78 101 103 32 99 104 101 99 107}
     }
   box {0 0 {width} {height}}
   yjustify bottom
   transforms {{0 2}
     }
   font_size_values {{0 {curve x1025 104.75} 1 104.75 2 104.75 3 104.75 4 104.75 5 104.75 6 104.75 7 104.75 8 104.75 0 {curve x1025 104.75}}
     }
   cursor_position 4
   font {{ Arial : Regular : Arial.ttf : 0 }}
   global_font_scale {{(height/2000)*font_scale}}
   font_size 104.75
   center {960 540}
   cursor_initialised true
   autofit_bbox false
   initial_cursor_position {{0 2160}
     }
   group_animations {{0} imported: 0 selected: items: "root transform/"}
   animation_layers {{1 11 960 540 0 0 1 1 0 0 0 0}
     }
   name Text1
   xpos 93
   ypos 65
  }
set Nb99d130 [stack 0]
  Shuffle {
   red white
   green white
   blue white
   alpha white
   name Shuffle1
   xpos 215
   ypos 65
  }
  Multiply {
   channels rgba
   value {{parent.bg_color} {parent.bg_color} {parent.bg_color} {parent.bg_color}}
   name Multiply1
   xpos 215
   ypos 93
  }
  BlackOutside {
   name BlackOutside1
   xpos 215
   ypos 129
  }
push $Nb99d130
  Merge2 {
   inputs 2
   operation under
   name Merge2
   xpos 93
   ypos 129
   disable {{!parent.enable_bg}}
  }
  Reformat {
   type scale
   scale {{1/parent.Reformat3.scale.0} {1/parent.Reformat3.scale.1}}
   resize none
   name Reformat4
   xpos 93
   ypos 166
  }
  Reformat {
   type "to box"
   box_width {{width}}
   box_pixel_aspect {{Input.pixel_aspect}}
   name Reformat2
   xpos 93
   ypos 210
  }
push $Nb9752a0
  Merge2 {
   inputs 2
   name Merge1
   xpos -61
   ypos 210
  }
  Output {
   name Output1
   xpos -61
   ypos 294
  }
 end_group
 Dot {
  name Dot13
  xpos -366
  ypos 748
 }
push $Nb92f3b0
 Dot {
  name Dot11
  xpos -151
  ypos 474
 }
set Nba2b8f0 [stack 0]
 Expression {
  expr0 r>peak
  expr1 g>peak
  expr2 b>peak
  name peak_check
  xpos -85
  ypos 543
  addUserKnob {20 User}
  addUserKnob {7 peak R 0 100}
  peak 55
 }
push $Nba2b8f0
 Grade {
  multiply 0.5
  name Grade1
  xpos -185
  ypos 541
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge3
  xpos -185
  ypos 604
 }
 Group {
  name burn_in3
  xpos -185
  ypos 666
  addUserKnob {20 User l Text}
  addUserKnob {41 message T Text1.message}
  addUserKnob {7 font_scale l "font scale" R 0 2}
  font_scale 1
  addUserKnob {14 margin l margins R 0 100}
  margin {0.015 0.03}
  addUserKnob {41 color T Text1.color}
  addUserKnob {19 bg_color l "background color"}
  bg_color {0 0 0 1}
  addUserKnob {6 bg_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 enable_bg l "enable background" +STARTLINE}
  enable_bg true
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {26 spacer l " "}
  addUserKnob {41 xjustify l justify T Text1.xjustify}
  addUserKnob {41 yjustify l "" -STARTLINE T Text1.yjustify}
  addUserKnob {20 vars l variables n 1}
  addUserKnob {1 var01}
  addUserKnob {1 var02}
  addUserKnob {1 var03}
  addUserKnob {20 endGroup n -1}
 }
  Input {
   inputs 0
   name Input
   xpos -61
   ypos -84
  }
  Dot {
   name Dot1
   xpos -27
   ypos -16
  }
set Nba71820 [stack 0]
  Dot {
   name Dot2
   xpos 127
   ypos -16
  }
  Reformat {
   type "to box"
   box_width {{width}}
   name Reformat1
   xpos 93
   ypos 2
  }
  Reformat {
   type scale
   scale {{1-parent.margin} {1-parent.margin}}
   resize none
   name Reformat3
   xpos 93
   ypos 37
  }
  Text2 {
   font_size_toolbar 104.75
   font_width_toolbar 100
   font_height_toolbar 100
   replace true
   message "Peak check"
   old_message {{80 101 97 107 32 99 104 101 99 107}
     }
   box {0 0 {width} {height}}
   yjustify bottom
   transforms {{0 2}
     }
   font_size_values {{0 {curve x1025 104.75} 1 104.75 2 104.75 3 104.75 4 104.75 5 104.75 6 104.75 7 104.75 8 104.75 9 104.75 0 {curve x1025 104.75}}
     }
   cursor_position 4
   font {{ Arial : Regular : Arial.ttf : 0 }}
   global_font_scale {{(height/2000)*font_scale}}
   font_size 104.75
   center {960 540}
   cursor_initialised true
   autofit_bbox false
   initial_cursor_position {{0 2160}
     }
   group_animations {{0} imported: 0 selected: items: "root transform/"}
   animation_layers {{1 11 960 540 0 0 1 1 0 0 0 0}
     }
   name Text1
   xpos 93
   ypos 65
  }
set Nba996a0 [stack 0]
  Shuffle {
   red white
   green white
   blue white
   alpha white
   name Shuffle1
   xpos 215
   ypos 65
  }
  Multiply {
   channels rgba
   value {{parent.bg_color} {parent.bg_color} {parent.bg_color} {parent.bg_color}}
   name Multiply1
   xpos 215
   ypos 93
  }
  BlackOutside {
   name BlackOutside1
   xpos 215
   ypos 129
  }
push $Nba996a0
  Merge2 {
   inputs 2
   operation under
   name Merge2
   xpos 93
   ypos 129
   disable {{!parent.enable_bg}}
  }
  Reformat {
   type scale
   scale {{1/parent.Reformat3.scale.0} {1/parent.Reformat3.scale.1}}
   resize none
   name Reformat4
   xpos 93
   ypos 166
  }
  Reformat {
   type "to box"
   box_width {{width}}
   box_pixel_aspect {{Input.pixel_aspect}}
   name Reformat2
   xpos 93
   ypos 210
  }
push $Nba71820
  Merge2 {
   inputs 2
   name Merge1
   xpos -61
   ypos 210
  }
  Output {
   name Output1
   xpos -61
   ypos 294
  }
 end_group
 Dot {
  name Dot14
  xpos -151
  ypos 746
 }
 Input {
  inputs 0
  name InputotherVer
  xpos 763
  ypos 220
  number 3
 }
 Dot {
  name Dot20
  xpos 797
  ypos 364
 }
set Nbb2ca70 [stack 0]
 Dot {
  name Dot18
  xpos 873
  ypos 364
 }
 Dot {
  name Dot19
  xpos 873
  ypos 618
 }
push $Nbb2ca70
push $Nba2b8f0
 Dot {
  name Dot9
  xpos 27
  ypos 474
 }
set Nbb3acc0 [stack 0]
 Dot {
  name Dot8
  xpos 219
  ypos 474
 }
set Nbb3f920 [stack 0]
 Dot {
  name Dot7
  xpos 436
  ypos 474
 }
set Nbb44440 [stack 0]
 Dot {
  name Dot6
  xpos 718
  ypos 474
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge2
  xpos 763
  ypos 549
 }
 CopyMetaData {
  inputs 2
  name CopyMetaData3
  xpos 763
  ypos 613
 }
 Group {
  name burn_in1
  xpos 763
  ypos 677
  addUserKnob {20 User l Text}
  addUserKnob {41 message T Text1.message}
  addUserKnob {7 font_scale l "font scale" R 0 2}
  font_scale 1
  addUserKnob {14 margin l margins R 0 100}
  margin {0.015 0.03}
  addUserKnob {41 color T Text1.color}
  addUserKnob {19 bg_color l "background color"}
  bg_color {0 0 0 1}
  addUserKnob {6 bg_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 enable_bg l "enable background" +STARTLINE}
  enable_bg true
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {26 spacer l " "}
  addUserKnob {41 xjustify l justify T Text1.xjustify}
  addUserKnob {41 yjustify l "" -STARTLINE T Text1.yjustify}
  addUserKnob {20 vars l variables n 1}
  addUserKnob {1 var01}
  var01 "\[lrange \[split \[file tail \[metadata input/filename]] . ] 0 0]"
  addUserKnob {1 var02}
  addUserKnob {1 var03}
  addUserKnob {20 endGroup n -1}
 }
  Input {
   inputs 0
   name Input
   xpos -61
   ypos -84
  }
  Dot {
   name Dot1
   xpos -27
   ypos -16
  }
set Nbb79950 [stack 0]
  Dot {
   name Dot2
   xpos 127
   ypos -16
  }
  Reformat {
   type "to box"
   box_width {{width}}
   name Reformat1
   xpos 93
   ypos 2
  }
  Reformat {
   type scale
   scale {{1-parent.margin} {1-parent.margin}}
   resize none
   name Reformat3
   xpos 93
   ypos 37
  }
  Text2 {
   font_size_toolbar 104.75
   font_width_toolbar 100
   font_height_toolbar 100
   replace true
   message "Difference with other version: \[value var01]"
   old_message {{68 105 102 102 101 114 101 110 99 101 32 119 105 116 104 32 111 116 104 101 114 32 118 101 114 115 105 111 110 58 32}
     }
   old_expression_markers {{31 30}
     }
   box {0 0 {width} {height}}
   yjustify bottom
   transforms {{0 2}
     }
   font_size_values {{0 {curve x1025 104.75} 1 {curve x1025 104.75} 2 {curve x1025 104.75} 3 {curve x1025 104.75} 4 {curve x1025 104.75} 5 {curve x1025 104.75} 6 {curve x1025 104.75} 7 {curve x1025 104.75} 8 {curve x1025 104.75} 9 {curve x1025 104.75} 10 {curve x1025 104.75} 11 {curve x1025 104.75} 12 {curve x1025 104.75} 13 {curve x1025 104.75} 14 {curve x1025 104.75} 15 {curve x1025 104.75} 16 104.75 17 104.75 18 104.75 19 104.75 20 104.75 21 104.75 22 104.75 23 104.75 24 104.75 25 104.75 26 104.75 27 104.75 28 104.75 29 {curve x1025 104.75} 30 {curve x1025 104.75} 0 {curve x1025 104.75} 1 {curve x1025 104.75} 2 {curve x1025 104.75} 3 {curve x1025 104.75} 4 {curve x1025 104.75} 5 {curve x1025 104.75} 6 {curve x1025 104.75} 7 {curve x1025 104.75} 8 {curve x1025 104.75} 9 {curve x1025 104.75} 10 {curve x1025 104.75} 11 {curve x1025 104.75} 12 {curve x1025 104.75} 13 {curve x1025 104.75} 14 {curve x1025 104.75} 15 {curve x1025 104.75} 29 {curve x1025 104.75} 30 {curve x1025 104.75}}
     }
   cursor_position 29
   font {{ Arial : Regular : Arial.ttf : 0 }}
   global_font_scale {{(height/2000)*font_scale}}
   font_size 104.75
   center {960 540}
   cursor_initialised true
   autofit_bbox false
   initial_cursor_position {{0 2160}
     }
   group_animations {{0} imported: 0 selected: items: "root transform/"}
   animation_layers {{1 11 960 540 0 0 1 1 0 0 0 0}
     }
   name Text1
   xpos 93
   ypos 65
  }
set Nbba17c0 [stack 0]
  Shuffle {
   red white
   green white
   blue white
   alpha white
   name Shuffle1
   xpos 215
   ypos 65
  }
  Multiply {
   channels rgba
   value {{parent.bg_color} {parent.bg_color} {parent.bg_color} {parent.bg_color}}
   name Multiply1
   xpos 215
   ypos 93
  }
  BlackOutside {
   name BlackOutside1
   xpos 215
   ypos 129
  }
push $Nbba17c0
  Merge2 {
   inputs 2
   operation under
   name Merge2
   xpos 93
   ypos 129
   disable {{!parent.enable_bg}}
  }
  Reformat {
   type scale
   scale {{1/parent.Reformat3.scale.0} {1/parent.Reformat3.scale.1}}
   resize none
   name Reformat4
   xpos 93
   ypos 166
  }
  Reformat {
   type "to box"
   box_width {{width}}
   box_pixel_aspect {{Input.pixel_aspect}}
   name Reformat2
   xpos 93
   ypos 210
  }
push $Nbb79950
  Merge2 {
   inputs 2
   name Merge1
   xpos -61
   ypos 210
  }
  Output {
   name Output1
   xpos -61
   ypos 294
  }
 end_group
 Dot {
  name Dot2
  xpos 797
  ypos 740
 }
set Nbc321b0 [stack 0]
 Input {
  inputs 0
  name InputrefQT
  xpos 535
  ypos 211
  number 2
 }
 Reformat {
  type "to box"
  box_width {{Delivery_Conform.width}}
  box_height {{Delivery_Conform.height}}
  box_fixed true
  box_pixel_aspect {{Delivery_Conform.pixel_aspect}}
  name Reformat1
  xpos 535
  ypos 322
 }
set Nbc3b610 [stack 0]
 Dot {
  name Dot16
  xpos 645
  ypos 327
 }
 Dot {
  name Dot17
  xpos 645
  ypos 629
 }
push $Nbc3b610
push $Nbb44440
 Group {
  name Delivery_Conform
  knobChanged "node = nuke.thisNode()\nknob = nuke.thisKnob()\nif knob.name() == 'file':\n    with node:\n        con = nuke.toNode('Delivery_Conform')\n        con\['published'].fromScript('1')\n        con\['file'].setValue(knob.getValue())\n        con\['published'].fromScript('0')\n        con.reload()"
  selected true
  xpos 402
  ypos 526
  addUserKnob {20 User l Controls}
  addUserKnob {2 file}
  file /Volumes/Projects/Freebirds/FB300/Production/delivery_conform/Delivery_Conform.nk
 }
  Input {
   inputs 0
   name Input
   xpos 455
   ypos 424
  }
  LiveGroup {
   published true
   version 6
   shownWarningFile ""
   file /Volumes/Projects/Freebirds/FB300/Production/delivery_conform/Delivery_Conform.nk
   advanced 0
   output ""
   name Delivery_Conform
   xpos 455
   ypos 497
  }
  Output {
   name Output1
   xpos 455
   ypos 564
  }
 end_group
 Group {
  name Dynamic_Viewer_Process_Aces
  xpos 402
  ypos 586
  addUserKnob {20 Settings -STARTLINE}
  addUserKnob {26 title l " " -STARTLINE T "<p><code><span style=\"font-size: xx-large;\"><span style=\"color: #ffb867;\">D</span><span style=\"color: #ffc173;\">YN</span><span style=\"color: #ffc97e;\">A</span><span style=\"color: #ffd28a;\">MI</span><span style=\"color: #ffd694;\">C</span><span style=\"color: #ffda9e;\">_V</span><span style=\"color: #ffdda7;\">I<span style=\"color: #fff6e8;\"><span style=\"font-size: xx-large;\">E</span></span><span style=\"color: #fff9ec;\"><span style=\"font-size: xx-large;\">W</span></span><span style=\"color: #fff5e2;\"><span style=\"font-size: xx-large;\">E</span></span><span style=\"color: #fff2d8;\"><span style=\"font-size: xx-large;\">R</span></span><span style=\"color: #ffeece;\">_PROCESS<span style=\"font-size: xx-large;\"></span></span></span></span></code></p>"}
  addUserKnob {26 ""}
  addUserKnob {4 mode l Mode M {Viewer Node}}
  mode Node
  addUserKnob {22 refresh l Refresh T "with nuke.thisNode():\n    nuke.toNode('CDL_setter')\['cache'].setValue('cache_reset')\n    nuke.toNode('LUT_setter')\['cache'].setValue('cache_reset')" +STARTLINE}
  addUserKnob {1 node_type +INVISIBLE}
  node_type dynamic_viewer
  addUserKnob {26 ""}
  addUserKnob {26 cdl_infosettings l " " T "<b><font size=5>CDL Info </font></b>"}
  addUserKnob {6 ignore_cdl l "Disable CDL" +STARTLINE}
  addUserKnob {41 working_space l INVISIBLE +INVISIBLE T apply_cdl_values.working_space}
  addUserKnob {41 cdl_directory l Directory T CDL_setter.cdl_directory}
  addUserKnob {41 cdl_file l File T CDL_setter.cdl_file}
  addUserKnob {26 ""}
  addUserKnob {26 lut_settings l " " T "<b><font size=5>LUT Info </font></b>"}
  addUserKnob {6 ignore_lut l "Disable LUT" +STARTLINE}
  addUserKnob {41 working_space_1 l INVISIBLE +INVISIBLE T apply_lut_values.working_space}
  addUserKnob {26 empty_3 l INVISIBLE +INVISIBLE T " "}
  addUserKnob {41 lut_directory l Directory T LUT_setter.lut_directory}
  addUserKnob {41 lut_file l File T LUT_setter.lut_file}
 }
  Input {
   inputs 0
   name Image
   xpos -1090
   ypos -801
  }
  Dot {
   name Dot7
   xpos -1056
   ypos -702
  }
set Nbd0b5e0 [stack 0]
  OCIOColorSpace {
   in_colorspace "ACES - ACEScg"
   out_colorspace "Input - Sony - S-Log3 - S-Gamut3.Cine"
   name OCIOColorSpace10
   label "\[value in_colorspace]\n\[value out_colorspace]"
   xpos -1090
   ypos -597
  }
  set Cbd100f0 [stack 0]
  Assert {
   expression {{"\[python -execlocal import\\ Dynamic_Viewer_Process_Aces\\ndynamic_viewer\\ =\\ Dynamic_Viewer_Process_Aces.DynamicViewer()\\nret = dynamic_viewer.set_cdl()]"}}
   name CDL_setter
   tile_color 0x9b72a3ff
   xpos -1090
   ypos -440
   addUserKnob {20 User}
   addUserKnob {1 cache}
   cache /Volumes/Projects/Freebirds/FB300/VFX/FB303/FB303_028/FB303_028_110/Plates/FB303_028_110_fg01_v002/dist/FB303_028_110_fg01_v002.1025.exr
   addUserKnob {1 cdl_file}
   cdl_file FB303_028_110.cc
   addUserKnob {1 cdl_directory}
   cdl_directory /Volumes/Projects/Freebirds/FB300/VFX/FB303/FB303_028/FB303_028_110/Plates/LUT
  }
  OCIOCDLTransform {
   slope {0.9581999779 0.94599998 0.9951000214}
   offset {-0.01470000017 -0.008799999952 -0.02250000089}
   power {0.9469000101 0.9060999751 0.8356999755}
   saturation 0.7929999828
   working_space "ACES - ACEScg"
   read_from_file true
   file /Volumes/Projects/Freebirds/FB300/VFX/FB303/FB303_028/FB303_028_110/Plates/LUT/FB303_028_110.cc
   version 5
   name apply_cdl_values
   xpos -1090
   ypos -394
  }
  OCIOColorSpace {
   in_colorspace "Input - Sony - S-Log3 - S-Gamut3.Cine"
   out_colorspace "ACES - ACEScg"
   name OCIOColorSpace2
   label "\[value in_colorspace]\n\[value out_colorspace]"
   xpos -1090
   ypos -358
  }
push $Nbd0b5e0
  Dot {
   name Dot2
   xpos -1206
   ypos -702
  }
  Dot {
   name Dot1
   xpos -1206
   ypos -246
  }
  Switch {
   inputs 2
   which {{parent.ignore_cdl?0:1}}
   name cdl_status
   xpos -1090
   ypos -249
  }
  Dot {
   name Dot3
   xpos -1056
   ypos -174
  }
set Nbea8820 [stack 0]
clone $Cbd100f0 {
   xpos -1090
   ypos -116
   selected false
  }
  Assert {
   expression {{"\[python -execlocal import\\ Dynamic_Viewer_Process_Aces\\ndynamic_viewer\\ =\\ Dynamic_Viewer_Process_Aces.DynamicViewer()\\nret = dynamic_viewer.set_lut()]"}}
   name LUT_setter
   xpos -1090
   ypos -57
   addUserKnob {20 User}
   addUserKnob {1 cache}
   cache /Volumes/Projects/Freebirds/FB300/VFX/FB303/FB303_028/FB303_028_110/Plates/FB303_028_110_fg01_v002/dist/FB303_028_110_fg01_v002.1025.exr
   addUserKnob {1 lut_file}
   lut_file Titans.cube
   addUserKnob {1 lut_directory}
   lut_directory /Volumes/Projects/Freebirds/FB300/VFX/LUT
  }
  OCIOFileTransform {
   file /Volumes/Projects/Freebirds/FB300/VFX/LUT/Titans.cube
   working_space "ACES - ACEScg"
   name apply_lut_values
   xpos -1090
   ypos -31
  }
push $Nbea8820
  Dot {
   name Dot5
   xpos -1206
   ypos -174
  }
  Dot {
   name Dot6
   xpos -1206
   ypos 114
  }
  Switch {
   inputs 2
   which {{parent.ignore_lut?0:1}}
   name lut_status
   xpos -1090
   ypos 110
  }
  Output {
   name Display
   xpos -1090
   ypos 255
  }
 end_group
 Merge2 {
  inputs 2
  operation difference
  name Merge1
  xpos 535
  ypos 586
 }
 CopyMetaData {
  inputs 2
  name CopyMetaData2
  xpos 535
  ypos 624
 }
 Group {
  name burn_in7
  xpos 535
  ypos 670
  addUserKnob {20 User l Text}
  addUserKnob {41 message T Text1.message}
  addUserKnob {7 font_scale l "font scale" R 0 2}
  font_scale 1
  addUserKnob {14 margin l margins R 0 100}
  margin {0.015 0.03}
  addUserKnob {41 color T Text1.color}
  addUserKnob {19 bg_color l "background color"}
  bg_color {0 0 0 1}
  addUserKnob {6 bg_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 enable_bg l "enable background" +STARTLINE}
  enable_bg true
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {26 spacer l " "}
  addUserKnob {41 xjustify l justify T Text1.xjustify}
  addUserKnob {41 yjustify l "" -STARTLINE T Text1.yjustify}
  addUserKnob {20 vars l variables n 1}
  addUserKnob {1 var01}
  var01 "\[lrange \[split \[file tail \[metadata input/filename]] . ] 0 0]"
  addUserKnob {1 var02}
  addUserKnob {1 var03}
  addUserKnob {20 endGroup n -1}
 }
  Input {
   inputs 0
   name Input
   xpos -61
   ypos -84
  }
  Dot {
   name Dot1
   xpos -27
   ypos -16
  }
set Nc2387e0 [stack 0]
  Dot {
   name Dot2
   xpos 127
   ypos -16
  }
  Reformat {
   type "to box"
   box_width {{width}}
   name Reformat1
   xpos 93
   ypos 2
  }
  Reformat {
   type scale
   scale {{1-parent.margin} {1-parent.margin}}
   resize none
   name Reformat3
   xpos 93
   ypos 37
  }
  Text2 {
   font_size_toolbar 100
   font_width_toolbar 100
   font_height_toolbar 100
   replace true
   message "Difference with refQT: \[value var01]"
   old_message {{68 105 102 102 101 114 101 110 99 101 32 119 105 116 104 32 114 101 102 81 84 58 32}
     }
   old_expression_markers {{23 22}
     }
   box {0 0 {width} {height}}
   yjustify bottom
   transforms {{0 2}
     }
   font_size_values {{0 {curve x1025 104.75} 1 {curve x1025 104.75} 2 {curve x1025 104.75} 3 {curve x1025 104.75} 4 {curve x1025 104.75} 5 {curve x1025 104.75} 6 {curve x1025 104.75} 7 {curve x1025 104.75} 8 {curve x1025 104.75} 9 {curve x1025 104.75} 10 {curve x1025 104.75} 11 {curve x1025 104.75} 12 {curve x1025 104.75} 13 {curve x1025 104.75} 14 {curve x1025 104.75} 15 {curve x1025 104.75} 21 {curve x1025 104.75} 22 {curve x1025 104.75} 0 {curve x1025 104.75} 1 {curve x1025 104.75} 2 {curve x1025 104.75} 3 {curve x1025 104.75} 4 {curve x1025 104.75} 5 {curve x1025 104.75} 6 {curve x1025 104.75} 7 {curve x1025 104.75} 8 {curve x1025 104.75} 9 {curve x1025 104.75} 10 {curve x1025 104.75} 11 {curve x1025 104.75} 12 {curve x1025 104.75} 13 {curve x1025 104.75} 14 {curve x1025 104.75} 15 {curve x1025 104.75} 21 {curve x1025 104.75} 22 {curve x1025 104.75}}
     }
   cursor_position 21
   font {{ Arial : Regular : Arial.ttf : 0 }}
   global_font_scale {{(height/2000)*font_scale}}
   center {960 540}
   cursor_initialised true
   autofit_bbox false
   initial_cursor_position {{0 2160}
     }
   group_animations {{0} imported: 0 selected: items: "root transform/"}
   animation_layers {{1 11 960 540 0 0 1 1 0 0 0 0}
     }
   name Text1
   xpos 93
   ypos 65
  }
set Nc21edd0 [stack 0]
  Shuffle {
   red white
   green white
   blue white
   alpha white
   name Shuffle1
   xpos 215
   ypos 65
  }
  Multiply {
   channels rgba
   value {{parent.bg_color} {parent.bg_color} {parent.bg_color} {parent.bg_color}}
   name Multiply1
   xpos 215
   ypos 93
  }
  BlackOutside {
   name BlackOutside1
   xpos 215
   ypos 129
  }
push $Nc21edd0
  Merge2 {
   inputs 2
   operation under
   name Merge2
   xpos 93
   ypos 129
   disable {{!parent.enable_bg}}
  }
  Reformat {
   type scale
   scale {{1/parent.Reformat3.scale.0} {1/parent.Reformat3.scale.1}}
   resize none
   name Reformat4
   xpos 93
   ypos 166
  }
  Reformat {
   type "to box"
   box_width {{width}}
   box_pixel_aspect {{Input.pixel_aspect}}
   name Reformat2
   xpos 93
   ypos 210
  }
push $Nc2387e0
  Merge2 {
   inputs 2
   name Merge1
   xpos -61
   ypos 210
  }
  Output {
   name Output1
   xpos -61
   ypos 294
  }
 end_group
 Dot {
  name Dot3
  xpos 569
  ypos 733
 }
set Nbfb8840 [stack 0]
push $Nbb3acc0
 Laplacian {
  size 2
  name Laplacian1
  xpos 63
  ypos 527
 }
 Multiply {
  channels rgba
  value 200
  name Multiply1
  xpos 63
  ypos 591
 }
 Group {
  name burn_in2
  xpos 63
  ypos 671
  addUserKnob {20 User l Text}
  addUserKnob {41 message T Text1.message}
  addUserKnob {7 font_scale l "font scale" R 0 2}
  font_scale 1
  addUserKnob {14 margin l margins R 0 100}
  margin {0.015 0.03}
  addUserKnob {41 color T Text1.color}
  addUserKnob {19 bg_color l "background color"}
  bg_color {0 0 0 1}
  addUserKnob {6 bg_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 enable_bg l "enable background" +STARTLINE}
  enable_bg true
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {26 spacer l " "}
  addUserKnob {41 xjustify l justify T Text1.xjustify}
  addUserKnob {41 yjustify l "" -STARTLINE T Text1.yjustify}
  addUserKnob {20 vars l variables n 1}
  addUserKnob {1 var01}
  addUserKnob {1 var02}
  addUserKnob {1 var03}
  addUserKnob {20 endGroup n -1}
 }
  Input {
   inputs 0
   name Input
   xpos -61
   ypos -84
  }
  Dot {
   name Dot1
   xpos -27
   ypos -16
  }
set Nbe5c480 [stack 0]
  Dot {
   name Dot2
   xpos 127
   ypos -16
  }
  Reformat {
   type "to box"
   box_width {{width}}
   name Reformat1
   xpos 93
   ypos 2
  }
  Reformat {
   type scale
   scale {{1-parent.margin} {1-parent.margin}}
   resize none
   name Reformat3
   xpos 93
   ypos 37
  }
  Text2 {
   font_size_toolbar 104.75
   font_width_toolbar 100
   font_height_toolbar 100
   replace true
   message "Grain check"
   old_message {{71 114 97 105 110 32 99 104 101 99 107}
     }
   box {0 0 {width} {height}}
   yjustify bottom
   transforms {{0 2}
     }
   font_size_values {{0 {curve x1025 104.75} 1 104.75 2 104.75 3 104.75 4 104.75 5 104.75 6 104.75 7 104.75 8 104.75 9 104.75 10 104.75 0 {curve x1025 104.75}}
     }
   cursor_position 11
   font {{ Arial : Regular : Arial.ttf : 0 }}
   global_font_scale {{(height/2000)*font_scale}}
   font_size 104.75
   center {960 540}
   cursor_initialised true
   autofit_bbox false
   initial_cursor_position {{0 2160}
     }
   group_animations {{0} imported: 0 selected: items: "root transform/"}
   animation_layers {{1 11 960 540 0 0 1 1 0 0 0 0}
     }
   name Text1
   xpos 93
   ypos 65
  }
set Nc0e4080 [stack 0]
  Shuffle {
   red white
   green white
   blue white
   alpha white
   name Shuffle1
   xpos 215
   ypos 65
  }
  Multiply {
   channels rgba
   value {{parent.bg_color} {parent.bg_color} {parent.bg_color} {parent.bg_color}}
   name Multiply1
   xpos 215
   ypos 93
  }
  BlackOutside {
   name BlackOutside1
   xpos 215
   ypos 129
  }
push $Nc0e4080
  Merge2 {
   inputs 2
   operation under
   name Merge2
   xpos 93
   ypos 129
   disable {{!parent.enable_bg}}
  }
  Reformat {
   type scale
   scale {{1/parent.Reformat3.scale.0} {1/parent.Reformat3.scale.1}}
   resize none
   name Reformat4
   xpos 93
   ypos 166
  }
  Reformat {
   type "to box"
   box_width {{width}}
   box_pixel_aspect {{Input.pixel_aspect}}
   name Reformat2
   xpos 93
   ypos 210
  }
push $Nbe5c480
  Merge2 {
   inputs 2
   name Merge1
   xpos -61
   ypos 210
  }
  Output {
   name Output1
   xpos -61
   ypos 294
  }
 end_group
 Dot {
  name Dot5
  xpos 97
  ypos 744
 }
set Nbff9f90 [stack 0]
 Input {
  inputs 0
  name Inputplate
  xpos 257
  ypos 208
 }
 Dot {
  name Dot15
  xpos 291
  ypos 348
 }
set Nbe43230 [stack 0]
 Dot {
  name Dot22
  xpos 367
  ypos 348
 }
 Dot {
  name Dot21
  xpos 367
  ypos 602
 }
push $Nbe43230
push $Nbb3f920
 Merge2 {
  inputs 2
  operation difference
  name Merge5
  xpos 257
  ypos 533
 }
 CopyMetaData {
  inputs 2
  name CopyMetaData1
  xpos 257
  ypos 597
 }
 Group {
  name burn_in
  xpos 257
  ypos 675
  addUserKnob {20 User l Text}
  addUserKnob {41 message T Text1.message}
  addUserKnob {7 font_scale l "font scale" R 0 2}
  font_scale 1
  addUserKnob {14 margin l margins R 0 100}
  margin {0.015 0.03}
  addUserKnob {41 color T Text1.color}
  addUserKnob {19 bg_color l "background color"}
  bg_color {0 0 0 1}
  addUserKnob {6 bg_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 enable_bg l "enable background" +STARTLINE}
  enable_bg true
  addUserKnob {6 bg_color_panelDropped_1_1_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {26 spacer l " "}
  addUserKnob {41 xjustify l justify T Text1.xjustify}
  addUserKnob {41 yjustify l "" -STARTLINE T Text1.yjustify}
  addUserKnob {20 vars l variables n 1}
  addUserKnob {1 var01}
  var01 "\[lrange \[split \[file tail \[metadata input/filename]] . ] 0 0]"
  addUserKnob {1 var02}
  addUserKnob {1 var03}
  addUserKnob {20 endGroup n -1}
 }
  Input {
   inputs 0
   name Input
   xpos -61
   ypos -84
  }
  Dot {
   name Dot1
   xpos -27
   ypos -16
  }
set Nbe47330 [stack 0]
  Dot {
   name Dot2
   xpos 127
   ypos -16
  }
  Reformat {
   type "to box"
   box_width {{width}}
   name Reformat1
   xpos 93
   ypos 2
  }
  Reformat {
   type scale
   scale {{1-parent.margin} {1-parent.margin}}
   resize none
   name Reformat3
   xpos 93
   ypos 37
  }
  Text2 {
   font_size_toolbar 100
   font_width_toolbar 100
   font_height_toolbar 100
   replace true
   message "Difference with plate: \[value var01]"
   old_message {{68 105 102 102 101 114 101 110 99 101 32 119 105 116 104 32 112 108 97 116 101 58 32}
     }
   old_expression_markers {{23 22}
     }
   box {0 0 {width} {height}}
   yjustify bottom
   transforms {{0 2}
     }
   font_size_values {{0 {curve x1025 104.75} 1 {curve x1025 104.75} 2 {curve x1025 104.75} 3 {curve x1025 104.75} 4 {curve x1025 104.75} 5 {curve x1025 104.75} 6 {curve x1025 104.75} 7 {curve x1025 104.75} 8 {curve x1025 104.75} 9 {curve x1025 104.75} 10 {curve x1025 104.75} 11 {curve x1025 104.75} 12 {curve x1025 104.75} 13 {curve x1025 104.75} 14 {curve x1025 104.75} 15 {curve x1025 104.75} 16 {curve x1025 104.75} 17 {curve x1025 104.75} 18 {curve x1025 104.75} 19 {curve x1025 104.75} 20 {curve x1025 104.75} 21 {curve x1025 104.75} 22 {curve x1025 104.75} 0 {curve x1025 104.75} 1 {curve x1025 104.75} 2 {curve x1025 104.75} 3 {curve x1025 104.75} 4 {curve x1025 104.75} 5 {curve x1025 104.75} 6 {curve x1025 104.75} 7 {curve x1025 104.75} 8 {curve x1025 104.75} 9 {curve x1025 104.75} 10 {curve x1025 104.75} 11 {curve x1025 104.75} 12 {curve x1025 104.75} 13 {curve x1025 104.75} 14 {curve x1025 104.75} 15 {curve x1025 104.75} 16 {curve x1025 104.75} 17 {curve x1025 104.75} 18 {curve x1025 104.75} 19 {curve x1025 104.75} 20 {curve x1025 104.75} 21 {curve x1025 104.75} 22 {curve x1025 104.75}}
     }
   cursor_position 30
   font {{ Arial : Regular : Arial.ttf : 0 }}
   global_font_scale {{(height/2000)*font_scale}}
   center {960 540}
   cursor_initialised true
   autofit_bbox false
   initial_cursor_position {{0 2160}
     }
   group_animations {{0} imported: 0 selected: items: "root transform/"}
   animation_layers {{1 11 960 540 0 0 1 1 0 0 0 0}
     }
   name Text1
   xpos 93
   ypos 65
  }
set Nbf20610 [stack 0]
  Shuffle {
   red white
   green white
   blue white
   alpha white
   name Shuffle1
   xpos 215
   ypos 65
  }
  Multiply {
   channels rgba
   value {{parent.bg_color} {parent.bg_color} {parent.bg_color} {parent.bg_color}}
   name Multiply1
   xpos 215
   ypos 93
  }
  BlackOutside {
   name BlackOutside1
   xpos 215
   ypos 129
  }
push $Nbf20610
  Merge2 {
   inputs 2
   operation under
   name Merge2
   xpos 93
   ypos 129
   disable {{!parent.enable_bg}}
  }
  Reformat {
   type scale
   scale {{1/parent.Reformat3.scale.0} {1/parent.Reformat3.scale.1}}
   resize none
   name Reformat4
   xpos 93
   ypos 166
  }
  Reformat {
   type "to box"
   box_width {{width}}
   box_pixel_aspect {{Input.pixel_aspect}}
   name Reformat2
   xpos 93
   ypos 210
  }
push $Nbe47330
  Merge2 {
   inputs 2
   name Merge1
   xpos -61
   ypos 210
  }
  Output {
   name Output1
   xpos -61
   ypos 294
  }
 end_group
 Dot {
  name Dot4
  xpos 291
  ypos 757
 }
set Nbe26b90 [stack 0]
push $Nbc321b0
push $Nbfb8840
 Reformat {
  type "to box"
  box_width {{width}}
  box_pixel_aspect {{Inputcomp.pixel_aspect}}
  name Reformat3
  xpos 639
  ypos 789
 }
 Reformat {
  type "to box"
  box_width {{Inputcomp.width}}
  box_height {{Inputcomp.height}}
  box_fixed true
  box_pixel_aspect {{pixel_aspect}}
  resize height
  black_outside true
  name Reformat4
  xpos 639
  ypos 836
 }
push $Nbe26b90
push $Nbff9f90
 ContactSheet {
  inputs 4
  width {{rows*width}}
  height {{(columns*height)/pixel_aspect}}
  rows 2
  columns 2
  name ContactSheet1
  xpos 763
  ypos 904
 }
 Switch {
  inputs 8
  which {{choice}}
  name Switch1
  label "\[value which]"
  xpos 156
  ypos 897
 }
 CopyMetaData {
  inputs 2
  name CopyMetaData4
  xpos 156
  ypos 966
 }
 Output {
  name Output1
  xpos 156
  ypos 1010
 }
end_group
